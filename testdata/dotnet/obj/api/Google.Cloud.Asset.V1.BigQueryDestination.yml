### YamlMime:ManagedReference
items:
- uid: Google.Cloud.Asset.V1.BigQueryDestination
  commentId: T:Google.Cloud.Asset.V1.BigQueryDestination
  id: BigQueryDestination
  parent: Google.Cloud.Asset.V1
  children:
  - Google.Cloud.Asset.V1.BigQueryDestination.#ctor
  - Google.Cloud.Asset.V1.BigQueryDestination.#ctor(Google.Cloud.Asset.V1.BigQueryDestination)
  - Google.Cloud.Asset.V1.BigQueryDestination.Dataset
  - Google.Cloud.Asset.V1.BigQueryDestination.Force
  - Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec
  - Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType
  - Google.Cloud.Asset.V1.BigQueryDestination.Table
  langs:
  - csharp
  - vb
  name: BigQueryDestination
  nameWithType: BigQueryDestination
  fullName: Google.Cloud.Asset.V1.BigQueryDestination
  type: Class
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BigQueryDestination
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4231
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  summary: "\nA BigQuery destination for exporting assets to.\n"
  example: []
  syntax:
    content: 'public sealed class BigQueryDestination : IMessage<BigQueryDestination>, IEquatable<BigQueryDestination>, IDeepCloneable<BigQueryDestination>, IBufferMessage, IMessage'
    content.vb: >-
      Public NotInheritable Class BigQueryDestination
          Implements IMessage(Of BigQueryDestination), IEquatable(Of BigQueryDestination), IDeepCloneable(Of BigQueryDestination), IBufferMessage, IMessage
  inheritance:
  - System.Object
  implements:
  - Google.Protobuf.IMessage{Google.Cloud.Asset.V1.BigQueryDestination}
  - System.IEquatable{Google.Cloud.Asset.V1.BigQueryDestination}
  - Google.Protobuf.IDeepCloneable{Google.Cloud.Asset.V1.BigQueryDestination}
  - Google.Protobuf.IBufferMessage
  - Google.Protobuf.IMessage
  inheritedMembers:
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Cloud.Asset.V1.BigQueryDestination.#ctor
  commentId: M:Google.Cloud.Asset.V1.BigQueryDestination.#ctor
  id: '#ctor'
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: BigQueryDestination()
  nameWithType: BigQueryDestination.BigQueryDestination()
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.BigQueryDestination()
  type: Constructor
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: .ctor
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4251
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  syntax:
    content: public BigQueryDestination()
    content.vb: Public Sub New
  overload: Google.Cloud.Asset.V1.BigQueryDestination.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Asset.V1.BigQueryDestination.#ctor(Google.Cloud.Asset.V1.BigQueryDestination)
  commentId: M:Google.Cloud.Asset.V1.BigQueryDestination.#ctor(Google.Cloud.Asset.V1.BigQueryDestination)
  id: '#ctor(Google.Cloud.Asset.V1.BigQueryDestination)'
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: BigQueryDestination(BigQueryDestination)
  nameWithType: BigQueryDestination.BigQueryDestination(BigQueryDestination)
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.BigQueryDestination(Google.Cloud.Asset.V1.BigQueryDestination)
  type: Constructor
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: .ctor
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4258
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  syntax:
    content: public BigQueryDestination(BigQueryDestination other)
    parameters:
    - id: other
      type: Google.Cloud.Asset.V1.BigQueryDestination
    content.vb: Public Sub New(other As BigQueryDestination)
  overload: Google.Cloud.Asset.V1.BigQueryDestination.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Asset.V1.BigQueryDestination.Dataset
  commentId: P:Google.Cloud.Asset.V1.BigQueryDestination.Dataset
  id: Dataset
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: Dataset
  nameWithType: BigQueryDestination.Dataset
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.Dataset
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Dataset
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4282
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  summary: "\nRequired. The BigQuery dataset in format\n&quot;projects/projectId/datasets/datasetId&quot;, to which the snapshot result\nshould be exported. If this dataset does not exist, the export call returns\nan INVALID_ARGUMENT error.\n"
  example: []
  syntax:
    content: public string Dataset { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Dataset As String
  overload: Google.Cloud.Asset.V1.BigQueryDestination.Dataset*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Asset.V1.BigQueryDestination.Table
  commentId: P:Google.Cloud.Asset.V1.BigQueryDestination.Table
  id: Table
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: BigQueryDestination.Table
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.Table
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Table
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4298
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  summary: "\nRequired. The BigQuery table to which the snapshot result should be\nwritten. If this table does not exist, a new table with the given name\nwill be created.\n"
  example: []
  syntax:
    content: public string Table { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Table As String
  overload: Google.Cloud.Asset.V1.BigQueryDestination.Table*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Asset.V1.BigQueryDestination.Force
  commentId: P:Google.Cloud.Asset.V1.BigQueryDestination.Force
  id: Force
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: Force
  nameWithType: BigQueryDestination.Force
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.Force
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Force
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4315
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  summary: "\nIf the destination table already exists and this flag is `TRUE`, the\ntable will be overwritten by the contents of assets snapshot. If the flag\nis `FALSE` or unset and the destination table already exists, the export\ncall returns an INVALID_ARGUMEMT error.\n"
  example: []
  syntax:
    content: public bool Force { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Force As Boolean
  overload: Google.Cloud.Asset.V1.BigQueryDestination.Force*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec
  commentId: P:Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec
  id: PartitionSpec
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: PartitionSpec
  nameWithType: BigQueryDestination.PartitionSpec
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionSpec
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4345
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  summary: "\n[partition_spec] determines whether to export to partitioned table(s) and\nhow to partition the data.\n\nIf [partition_spec] is unset or [partition_spec.partition_key] is unset or\n`PARTITION_KEY_UNSPECIFIED`, the snapshot results will be exported to\nnon-partitioned table(s). [force] will decide whether to overwrite existing\ntable(s).\n\nIf [partition_spec] is specified. First, the snapshot results will be\nwritten to partitioned table(s) with two additional timestamp columns,\nreadTime and requestTime, one of which will be the partition key. Secondly,\nin the case when any destination table already exists, it will first try to\nupdate existing table&apos;s schema as necessary by appending additional\ncolumns. Then, if [force] is `TRUE`, the corresponding partition will be\noverwritten by the snapshot results (data in different partitions will\nremain intact); if [force] is unset or `FALSE`, it will append the data. An\nerror will be returned if the schema update or data appension fails.\n"
  example: []
  syntax:
    content: public PartitionSpec PartitionSpec { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Asset.V1.PartitionSpec
    content.vb: Public Property PartitionSpec As PartitionSpec
  overload: Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType
  commentId: P:Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType
  id: SeparateTablesPerAssetType
  parent: Google.Cloud.Asset.V1.BigQueryDestination
  langs:
  - csharp
  - vb
  name: SeparateTablesPerAssetType
  nameWithType: BigQueryDestination.SeparateTablesPerAssetType
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
      branch: 4452d3ba8345dd6cf2976f10876e28bd3e2e48a0
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: SeparateTablesPerAssetType
    path: ../../../apis/Google.Cloud.Asset.V1/Google.Cloud.Asset.V1/AssetService.g.cs
    startLine: 4385
  assemblies:
  - Google.Cloud.Asset.V1
  namespace: Google.Cloud.Asset.V1
  summary: "\nIf this flag is `TRUE`, the snapshot results will be written to one or\nmultiple tables, each of which contains results of one asset type. The\n[force] and [partition_spec] fields will apply to each of them.\n\nField [table] will be concatenated with &quot;_&quot; and the asset type names (see\nhttps://cloud.google.com/asset-inventory/docs/supported-asset-types for\nsupported asset types) to construct per-asset-type table names, in which\nall non-alphanumeric characters like &quot;.&quot; and &quot;/&quot; will be substituted by\n&quot;_&quot;. Example: if field [table] is &quot;mytable&quot; and snapshot results\ncontain &quot;storage.googleapis.com/Bucket&quot; assets, the corresponding table\nname will be &quot;mytable_storage_googleapis_com_Bucket&quot;. If any of these\ntables does not exist, a new table with the concatenated name will be\ncreated.\n\nWhen [content_type] in the ExportAssetsRequest is `RESOURCE`, the schema of\neach table will include RECORD-type columns mapped to the nested fields in\nthe Asset.resource.data field of that asset type (up to the 15 nested level\nBigQuery supports\n(https://cloud.google.com/bigquery/docs/nested-repeated#limitations)). The\nfields in >15 nested levels will be stored in JSON format string as a child\ncolumn of its parent RECORD column.\n\nIf error occurs when exporting to any table, the whole export call will\nreturn an error but the export results that already succeed will persist.\nExample: if exporting to table_type_A succeeds when exporting to\ntable_type_B fails during one export call, the results in table_type_A will\npersist and there will not be partial results persisting in a table.\n"
  example: []
  syntax:
    content: public bool SeparateTablesPerAssetType { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property SeparateTablesPerAssetType As Boolean
  overload: Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Google.Cloud.Asset.V1
  commentId: N:Google.Cloud.Asset.V1
  name: Google.Cloud.Asset.V1
  nameWithType: Google.Cloud.Asset.V1
  fullName: Google.Cloud.Asset.V1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Protobuf.IMessage{Google.Cloud.Asset.V1.BigQueryDestination}
  commentId: T:Google.Protobuf.IMessage{Google.Cloud.Asset.V1.BigQueryDestination}
  parent: Google.Protobuf
  definition: Google.Protobuf.IMessage`1
  name: IMessage<BigQueryDestination>
  nameWithType: IMessage<BigQueryDestination>
  fullName: Google.Protobuf.IMessage<Google.Cloud.Asset.V1.BigQueryDestination>
  nameWithType.vb: IMessage(Of BigQueryDestination)
  fullName.vb: Google.Protobuf.IMessage(Of Google.Cloud.Asset.V1.BigQueryDestination)
  name.vb: IMessage(Of BigQueryDestination)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Asset.V1.BigQueryDestination
    name: BigQueryDestination
    nameWithType: BigQueryDestination
    fullName: Google.Cloud.Asset.V1.BigQueryDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Asset.V1.BigQueryDestination
    name: BigQueryDestination
    nameWithType: BigQueryDestination
    fullName: Google.Cloud.Asset.V1.BigQueryDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Google.Cloud.Asset.V1.BigQueryDestination}
  commentId: T:System.IEquatable{Google.Cloud.Asset.V1.BigQueryDestination}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<BigQueryDestination>
  nameWithType: IEquatable<BigQueryDestination>
  fullName: System.IEquatable<Google.Cloud.Asset.V1.BigQueryDestination>
  nameWithType.vb: IEquatable(Of BigQueryDestination)
  fullName.vb: System.IEquatable(Of Google.Cloud.Asset.V1.BigQueryDestination)
  name.vb: IEquatable(Of BigQueryDestination)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Asset.V1.BigQueryDestination
    name: BigQueryDestination
    nameWithType: BigQueryDestination
    fullName: Google.Cloud.Asset.V1.BigQueryDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Asset.V1.BigQueryDestination
    name: BigQueryDestination
    nameWithType: BigQueryDestination
    fullName: Google.Cloud.Asset.V1.BigQueryDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable{Google.Cloud.Asset.V1.BigQueryDestination}
  commentId: T:Google.Protobuf.IDeepCloneable{Google.Cloud.Asset.V1.BigQueryDestination}
  parent: Google.Protobuf
  definition: Google.Protobuf.IDeepCloneable`1
  name: IDeepCloneable<BigQueryDestination>
  nameWithType: IDeepCloneable<BigQueryDestination>
  fullName: Google.Protobuf.IDeepCloneable<Google.Cloud.Asset.V1.BigQueryDestination>
  nameWithType.vb: IDeepCloneable(Of BigQueryDestination)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of Google.Cloud.Asset.V1.BigQueryDestination)
  name.vb: IDeepCloneable(Of BigQueryDestination)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Asset.V1.BigQueryDestination
    name: BigQueryDestination
    nameWithType: BigQueryDestination
    fullName: Google.Cloud.Asset.V1.BigQueryDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Asset.V1.BigQueryDestination
    name: BigQueryDestination
    nameWithType: BigQueryDestination
    fullName: Google.Cloud.Asset.V1.BigQueryDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IBufferMessage
  commentId: T:Google.Protobuf.IBufferMessage
  parent: Google.Protobuf
  isExternal: true
  name: IBufferMessage
  nameWithType: IBufferMessage
  fullName: Google.Protobuf.IBufferMessage
- uid: Google.Protobuf.IMessage
  commentId: T:Google.Protobuf.IMessage
  parent: Google.Protobuf
  isExternal: true
  name: IMessage
  nameWithType: IMessage
  fullName: Google.Protobuf.IMessage
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.IMessage`1
  commentId: T:Google.Protobuf.IMessage`1
  isExternal: true
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Google.Protobuf.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Google.Protobuf.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  isExternal: true
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable`1
  commentId: T:Google.Protobuf.IDeepCloneable`1
  isExternal: true
  name: IDeepCloneable<T>
  nameWithType: IDeepCloneable<T>
  fullName: Google.Protobuf.IDeepCloneable<T>
  nameWithType.vb: IDeepCloneable(Of T)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T)
  name.vb: IDeepCloneable(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Asset.V1.BigQueryDestination.#ctor*
  commentId: Overload:Google.Cloud.Asset.V1.BigQueryDestination.#ctor
  name: BigQueryDestination
  nameWithType: BigQueryDestination.BigQueryDestination
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.BigQueryDestination
- uid: Google.Cloud.Asset.V1.BigQueryDestination
  commentId: T:Google.Cloud.Asset.V1.BigQueryDestination
  parent: Google.Cloud.Asset.V1
  name: BigQueryDestination
  nameWithType: BigQueryDestination
  fullName: Google.Cloud.Asset.V1.BigQueryDestination
- uid: Google.Cloud.Asset.V1.BigQueryDestination.Dataset*
  commentId: Overload:Google.Cloud.Asset.V1.BigQueryDestination.Dataset
  name: Dataset
  nameWithType: BigQueryDestination.Dataset
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.Dataset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Google.Cloud.Asset.V1.BigQueryDestination.Table*
  commentId: Overload:Google.Cloud.Asset.V1.BigQueryDestination.Table
  name: Table
  nameWithType: BigQueryDestination.Table
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.Table
- uid: Google.Cloud.Asset.V1.BigQueryDestination.Force*
  commentId: Overload:Google.Cloud.Asset.V1.BigQueryDestination.Force
  name: Force
  nameWithType: BigQueryDestination.Force
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.Force
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec*
  commentId: Overload:Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec
  name: PartitionSpec
  nameWithType: BigQueryDestination.PartitionSpec
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.PartitionSpec
- uid: Google.Cloud.Asset.V1.PartitionSpec
  commentId: T:Google.Cloud.Asset.V1.PartitionSpec
  parent: Google.Cloud.Asset.V1
  name: PartitionSpec
  nameWithType: PartitionSpec
  fullName: Google.Cloud.Asset.V1.PartitionSpec
- uid: Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType*
  commentId: Overload:Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType
  name: SeparateTablesPerAssetType
  nameWithType: BigQueryDestination.SeparateTablesPerAssetType
  fullName: Google.Cloud.Asset.V1.BigQueryDestination.SeparateTablesPerAssetType
