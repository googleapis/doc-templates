### YamlMime:UniversalReference
items:
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations
  children: 
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations.configure(class)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#cancel_operation(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#configure(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#delete_operation(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#get_operation(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#initialize(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#list_operations(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations#wait_operation(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Operations::Configuration
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations
  langs:
  - ruby
  module: google-cloud-vision-v1
  id: Operations
  summary: "Service that implements Longrunning Operations API."
  type: "class"
  name: Google::Cloud::Vision::V1::ImageAnnotator::Operations
  example: []
  inherits:
  - "Object"
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations.configure(class)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations.configure
  name: ".configure"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: ".configure"
  summary: "Configuration for the ImageAnnotator Operations API."
  type: method
  example: []
  syntax:
    description: "Configuration for the ImageAnnotator Operations API."
    content: "def self.configure() { |config| ... } -> Operations::Configuration"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Operations client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations-Configuration\">Operations::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations-Configuration\">Operations::Configuration</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#cancel_operation(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#cancel_operation
  name: "#cancel_operation"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#cancel_operation"
  summary: "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn&#39;t support this method, it returns\n<code>google.rpc.Code.UNIMPLEMENTED</code>.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan <span class='object_link'><a href=\"Google-Longrunning-Operation#Google__Longrunning__Operation_error_instance_\" title=\"Google::Longrunning::Operation#error (method)\">Operation.error</a></span> value with a <span class='object_link'><a href=\"Google-Rpc-Status#Google__Rpc__Status_code_instance_\" title=\"Google::Rpc::Status#code (method)\">google.rpc.Status.code</a></span> of 1,\ncorresponding to <code>Code.CANCELLED</code>."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/longrunning\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Longrunning::Operations::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Longrunning::CancelOperationRequest.new\n\n# Call the cancel_operation method.\nresult = client.cancel_operation request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn&#39;t support this method, it returns\n<code>google.rpc.Code.UNIMPLEMENTED</code>.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan <span class='object_link'><a href=\"Google-Longrunning-Operation#Google__Longrunning__Operation_error_instance_\" title=\"Google::Longrunning::Operation#error (method)\">Operation.error</a></span> value with a <span class='object_link'><a href=\"Google-Rpc-Status#Google__Rpc__Status_code_instance_\" title=\"Google::Rpc::Status#code (method)\">google.rpc.Status.code</a></span> of 1,\ncorresponding to <code>Code.CANCELLED</code>."
    content: "def cancel_operation(request, options = nil) -> ::Google::Protobuf::Empty\ndef cancel_operation(name: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def cancel_operation(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>cancel_operation</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Longrunning-CancelOperationRequest\" title=\"Google::Longrunning::CancelOperationRequest (class)\">Longrunning::CancelOperationRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Longrunning-CancelOperationRequest\">::Google::Longrunning::CancelOperationRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def cancel_operation(name: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>cancel_operation</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — The name of the operation resource to be cancelled."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#configure(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#configure
  name: "#configure"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#configure"
  summary: "Configure the ImageAnnotator Operations instance.</p>\n\n<p>The configuration is set to the derived mode, meaning that values can be changed,\nbut structural changes (adding new fields, etc.) are not allowed. Structural changes\nshould be made on <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Operations#Google__Cloud__Vision__V1__ImageAnnotator__Operations_configure_class_\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Operations.configure (method)\">Operations.configure</a></span>."
  type: method
  example: []
  syntax:
    description: "Configure the ImageAnnotator Operations instance.</p>\n\n<p>The configuration is set to the derived mode, meaning that values can be changed,\nbut structural changes (adding new fields, etc.) are not allowed. Structural changes\nshould be made on <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Operations#Google__Cloud__Vision__V1__ImageAnnotator__Operations_configure_class_\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Operations.configure (method)\">Operations.configure</a></span>."
    content: "def configure() { |config| ... } -> Operations::Configuration"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Operations client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations-Configuration\">Operations::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations-Configuration\">Operations::Configuration</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#delete_operation(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#delete_operation
  name: "#delete_operation"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#delete_operation"
  summary: "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn&#39;t support this method, it returns\n<code>google.rpc.Code.UNIMPLEMENTED</code>."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/longrunning\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Longrunning::Operations::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Longrunning::DeleteOperationRequest.new\n\n# Call the delete_operation method.\nresult = client.delete_operation request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn&#39;t support this method, it returns\n<code>google.rpc.Code.UNIMPLEMENTED</code>."
    content: "def delete_operation(request, options = nil) -> ::Google::Protobuf::Empty\ndef delete_operation(name: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def delete_operation(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_operation</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Longrunning-DeleteOperationRequest\" title=\"Google::Longrunning::DeleteOperationRequest (class)\">Longrunning::DeleteOperationRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Longrunning-DeleteOperationRequest\">::Google::Longrunning::DeleteOperationRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def delete_operation(name: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_operation</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — The name of the operation resource to be deleted."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#get_operation(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#get_operation
  name: "#get_operation"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#get_operation"
  summary: "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/longrunning\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Longrunning::Operations::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Longrunning::GetOperationRequest.new\n\n# Call the get_operation method.\nresult = client.get_operation request\n\n# The returned object is of type Gapic::Operation. You can use this\n# object to check the status of an operation, cancel it, or wait\n# for results. Here is how to block until completion:\nresult.wait_until_done! timeout: 60\nif result.response?\n  p result.response\nelse\n  puts \"Error!\"\nend</pre>"
  syntax:
    description: "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice."
    content: "def get_operation(request, options = nil) -> ::Gapic::Operation\ndef get_operation(name: nil) -> ::Gapic::Operation"
    aliases: []
    overloads:
    - content: "def get_operation(request, options = nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>get_operation</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Longrunning-GetOperationRequest\" title=\"Google::Longrunning::GetOperationRequest (class)\">Longrunning::GetOperationRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Longrunning-GetOperationRequest\">::Google::Longrunning::GetOperationRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def get_operation(name: nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>get_operation</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — The name of the operation resource."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::Operation)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::Operation)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#initialize(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#initialize
  name: "#initialize"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#initialize"
  summary: "Create a new Operations client object."
  type: method
  example: []
  syntax:
    description: "Create a new Operations client object."
    content: "def initialize() { |config| ... } -> Operations"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Client client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations-Configuration\">Operations::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations\">Operations</a>) — a new instance of Operations"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#list_operations(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#list_operations
  name: "#list_operations"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#list_operations"
  summary: "Lists operations that match the specified filter in the request. If the\nserver doesn&#39;t support this method, it returns <code>UNIMPLEMENTED</code>.</p>\n\n<p>NOTE: the <code>name</code> binding allows API services to override the binding\nto use different resource name schemes, such as <code>users/*/operations</code>. To\noverride the binding, API services can add a binding such as\n<code>&quot;/v1/{name=users/*}/operations&quot;</code> to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/longrunning\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Longrunning::Operations::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Longrunning::ListOperationsRequest.new\n\n# Call the list_operations method.\nresult = client.list_operations request\n\n# The returned object is of type Gapic::PagedEnumerable. You can\n# iterate over all elements by calling #each, and the enumerable\n# will lazily make API calls to fetch subsequent pages. Other\n# methods are also available for managing paging directly.\nresult.each do |response|\n  # Each element is of type ::Google::Longrunning::Operation.\n  p response\nend</pre>"
  syntax:
    description: "Lists operations that match the specified filter in the request. If the\nserver doesn&#39;t support this method, it returns <code>UNIMPLEMENTED</code>.</p>\n\n<p>NOTE: the <code>name</code> binding allows API services to override the binding\nto use different resource name schemes, such as <code>users/*/operations</code>. To\noverride the binding, API services can add a binding such as\n<code>&quot;/v1/{name=users/*}/operations&quot;</code> to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id."
    content: "def list_operations(request, options = nil) -> ::Gapic::PagedEnumerable<::Gapic::Operation>\ndef list_operations(name: nil, filter: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Gapic::Operation>"
    aliases: []
    overloads:
    - content: "def list_operations(request, options = nil) -> ::Gapic::PagedEnumerable<::Gapic::Operation>"
      description: "Pass arguments to <code>list_operations</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Longrunning-ListOperationsRequest\" title=\"Google::Longrunning::ListOperationsRequest (class)\">Longrunning::ListOperationsRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Longrunning-ListOperationsRequest\">::Google::Longrunning::ListOperationsRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def list_operations(name: nil, filter: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Gapic::Operation>"
      description: "Pass arguments to <code>list_operations</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — The name of the operation&#39;s parent resource."
      - description: "<strong>filter</strong> (::String) — The standard list filter."
      - description: "<strong>page_size</strong> (::Integer) — The standard list page size."
      - description: "<strong>page_token</strong> (::String) — The standard list page token."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::PagedEnumerable&lt;::Gapic::Operation&gt;)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::PagedEnumerable&lt;::Gapic::Operation&gt;)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations#wait_operation(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations#wait_operation
  name: "#wait_operation"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#wait_operation"
  summary: "Waits until the specified long-running operation is done or reaches at most\na specified timeout, returning the latest state.  If the operation is\nalready done, the latest state is immediately returned.  If the timeout\nspecified is greater than the default HTTP/RPC timeout, the HTTP/RPC\ntimeout is used.  If the server does not support this method, it returns\n<code>google.rpc.Code.UNIMPLEMENTED</code>.\nNote that this method is on a best-effort basis.  It may return the latest\nstate before the specified timeout (including immediately), meaning even an\nimmediate response is no guarantee that the operation is done."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/longrunning\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Longrunning::Operations::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Longrunning::WaitOperationRequest.new\n\n# Call the wait_operation method.\nresult = client.wait_operation request\n\n# The returned object is of type Gapic::Operation. You can use this\n# object to check the status of an operation, cancel it, or wait\n# for results. Here is how to block until completion:\nresult.wait_until_done! timeout: 60\nif result.response?\n  p result.response\nelse\n  puts \"Error!\"\nend</pre>"
  syntax:
    description: "Waits until the specified long-running operation is done or reaches at most\na specified timeout, returning the latest state.  If the operation is\nalready done, the latest state is immediately returned.  If the timeout\nspecified is greater than the default HTTP/RPC timeout, the HTTP/RPC\ntimeout is used.  If the server does not support this method, it returns\n<code>google.rpc.Code.UNIMPLEMENTED</code>.\nNote that this method is on a best-effort basis.  It may return the latest\nstate before the specified timeout (including immediately), meaning even an\nimmediate response is no guarantee that the operation is done."
    content: "def wait_operation(request, options = nil) -> ::Gapic::Operation\ndef wait_operation(name: nil, timeout: nil) -> ::Gapic::Operation"
    aliases: []
    overloads:
    - content: "def wait_operation(request, options = nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>wait_operation</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Longrunning-WaitOperationRequest\" title=\"Google::Longrunning::WaitOperationRequest (class)\">Longrunning::WaitOperationRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Longrunning-WaitOperationRequest\">::Google::Longrunning::WaitOperationRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def wait_operation(name: nil, timeout: nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>wait_operation</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — The name of the operation resource to wait on."
      - description: "<strong>timeout</strong> (<a href=\"./Google-Protobuf-Duration\">::Google::Protobuf::Duration</a>, ::Hash) — The maximum duration to wait before timing out. If left blank, the wait\nwill be at most the time permitted by the underlying HTTP/RPC protocol.\nIf RPC context deadline is also specified, the shorter one will be used."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::Operation)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::Operation)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
references:
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Operations::Configuration
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Operations::Configuration
  name: Configuration
  module: google-cloud-vision-v1
  id: Configuration
  summary: "Configuration class for the Operations API.</p>\n\n<p>This class represents the configuration for Operations,\nproviding control over timeouts, retry behavior, logging, transport\nparameters, and other low-level controls. Certain parameters can also be\napplied individually to specific RPCs. See\nLongrunning::Operations::Client::Configuration::Rpcs\nfor a list of RPCs that can be configured independently.</p>\n\n<p>Configuration can be applied globally to all clients, or to a single client\non construction."
  parent: Google::Cloud::Vision::V1::ImageAnnotator::Operations