### YamlMime:UniversalReference
items:
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client
  children: 
  - Google::Cloud::Vision::V1::ImageAnnotator::Client.configure(class)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#async_batch_annotate_files(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#async_batch_annotate_images(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#batch_annotate_files(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#batch_annotate_images(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#configure(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#crop_hints_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#document_text_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#face_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#image_properties_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#initialize(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#label_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#landmark_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#logo_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#object_localization_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#operations_client(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#product_search_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#safe_search_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#text_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client#web_detection(instance)
  - Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client
  langs:
  - ruby
  module: google-cloud-vision-v1
  id: Client
  summary: "Client for the ImageAnnotator service.</p>\n\n<p>Service that performs Google Cloud Vision API detection tasks over client\nimages, such as face, landmark, logo, label, and text detection. The\nImageAnnotator service returns detected entities from the images."
  type: "class"
  name: Google::Cloud::Vision::V1::ImageAnnotator::Client
  example: []
  inherits:
  - "Object"
  includes:
  - "<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Paths\">Google::Cloud::Vision::V1::ImageAnnotator::Paths</a>"
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client.configure(class)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client.configure
  name: ".configure"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: ".configure"
  summary: "Configure the ImageAnnotator Client class.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">\n# Modify the configuration for all ImageAnnotator clients\n::Google::Cloud::Vision::V1::ImageAnnotator::Client.configure do |config|\n  config.timeout = 10.0\nend</pre>"
  syntax:
    description: "Configure the ImageAnnotator Client class.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
    content: "def self.configure() { |config| ... } -> Client::Configuration"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Client client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\">Client::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\">Client::Configuration</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#async_batch_annotate_files(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#async_batch_annotate_files
  name: "#async_batch_annotate_files"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#async_batch_annotate_files"
  summary: "Run asynchronous image detection and annotation for a list of generic\nfiles, such as PDF files, which may contain multiple pages and multiple\nimages per page. Progress and results can be retrieved through the\n<code>google.longrunning.Operations</code> interface.\n<code>Operation.metadata</code> contains <code>OperationMetadata</code> (metadata).\n<code>Operation.response</code> contains <code>AsyncBatchAnnotateFilesResponse</code> (results)."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::AsyncBatchAnnotateFilesRequest.new\n\n# Call the async_batch_annotate_files method.\nresult = client.async_batch_annotate_files request\n\n# The returned object is of type Gapic::Operation. You can use this\n# object to check the status of an operation, cancel it, or wait\n# for results. Here is how to block until completion:\nresult.wait_until_done! timeout: 60\nif result.response?\n  p result.response\nelse\n  puts \"Error!\"\nend</pre>"
  syntax:
    description: "Run asynchronous image detection and annotation for a list of generic\nfiles, such as PDF files, which may contain multiple pages and multiple\nimages per page. Progress and results can be retrieved through the\n<code>google.longrunning.Operations</code> interface.\n<code>Operation.metadata</code> contains <code>OperationMetadata</code> (metadata).\n<code>Operation.response</code> contains <code>AsyncBatchAnnotateFilesResponse</code> (results)."
    content: "def async_batch_annotate_files(request, options = nil) -> ::Gapic::Operation\ndef async_batch_annotate_files(requests: nil, parent: nil) -> ::Gapic::Operation"
    aliases: []
    overloads:
    - content: "def async_batch_annotate_files(request, options = nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>async_batch_annotate_files</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-AsyncBatchAnnotateFilesRequest\" title=\"Google::Cloud::Vision::V1::AsyncBatchAnnotateFilesRequest (class)\">AsyncBatchAnnotateFilesRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-AsyncBatchAnnotateFilesRequest\">::Google::Cloud::Vision::V1::AsyncBatchAnnotateFilesRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def async_batch_annotate_files(requests: nil, parent: nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>async_batch_annotate_files</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>requests</strong> (::Array&lt;<a href=\"./Google-Cloud-Vision-V1-AsyncAnnotateFileRequest\">::Google::Cloud::Vision::V1::AsyncAnnotateFileRequest</a>, ::Hash&gt;) — Required. Individual async file annotation requests for this batch."
      - description: "<strong>parent</strong> (::String) — Optional. Target project and location to make a call.</p>\n\n<p>Format: <code>projects/{project-id}/locations/{location-id}</code>.</p>\n\n<p>If no parent is specified, a region will be chosen automatically.</p>\n\n<p>Supported location-ids:\n    <code>us</code>: USA country only,\n    <code>asia</code>: East asia areas, like Japan, Taiwan,\n    <code>eu</code>: The European Union.</p>\n\n<p>Example: <code>projects/project-A/locations/eu</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::Operation)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::Operation)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#async_batch_annotate_images(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#async_batch_annotate_images
  name: "#async_batch_annotate_images"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#async_batch_annotate_images"
  summary: "Run asynchronous image detection and annotation for a list of images.</p>\n\n<p>Progress and results can be retrieved through the\n<code>google.longrunning.Operations</code> interface.\n<code>Operation.metadata</code> contains <code>OperationMetadata</code> (metadata).\n<code>Operation.response</code> contains <code>AsyncBatchAnnotateImagesResponse</code> (results).</p>\n\n<p>This service will write image annotation outputs to json files in customer\nGCS bucket, each json file containing BatchAnnotateImagesResponse proto."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::AsyncBatchAnnotateImagesRequest.new\n\n# Call the async_batch_annotate_images method.\nresult = client.async_batch_annotate_images request\n\n# The returned object is of type Gapic::Operation. You can use this\n# object to check the status of an operation, cancel it, or wait\n# for results. Here is how to block until completion:\nresult.wait_until_done! timeout: 60\nif result.response?\n  p result.response\nelse\n  puts \"Error!\"\nend</pre>"
  syntax:
    description: "Run asynchronous image detection and annotation for a list of images.</p>\n\n<p>Progress and results can be retrieved through the\n<code>google.longrunning.Operations</code> interface.\n<code>Operation.metadata</code> contains <code>OperationMetadata</code> (metadata).\n<code>Operation.response</code> contains <code>AsyncBatchAnnotateImagesResponse</code> (results).</p>\n\n<p>This service will write image annotation outputs to json files in customer\nGCS bucket, each json file containing BatchAnnotateImagesResponse proto."
    content: "def async_batch_annotate_images(request, options = nil) -> ::Gapic::Operation\ndef async_batch_annotate_images(requests: nil, output_config: nil, parent: nil) -> ::Gapic::Operation"
    aliases: []
    overloads:
    - content: "def async_batch_annotate_images(request, options = nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>async_batch_annotate_images</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-AsyncBatchAnnotateImagesRequest\" title=\"Google::Cloud::Vision::V1::AsyncBatchAnnotateImagesRequest (class)\">AsyncBatchAnnotateImagesRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-AsyncBatchAnnotateImagesRequest\">::Google::Cloud::Vision::V1::AsyncBatchAnnotateImagesRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def async_batch_annotate_images(requests: nil, output_config: nil, parent: nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>async_batch_annotate_images</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>requests</strong> (::Array&lt;<a href=\"./Google-Cloud-Vision-V1-AnnotateImageRequest\">::Google::Cloud::Vision::V1::AnnotateImageRequest</a>, ::Hash&gt;) — Required. Individual image annotation requests for this batch."
      - description: "<strong>output_config</strong> (<a href=\"./Google-Cloud-Vision-V1-OutputConfig\">::Google::Cloud::Vision::V1::OutputConfig</a>, ::Hash) — Required. The desired output location and metadata (e.g. format)."
      - description: "<strong>parent</strong> (::String) — Optional. Target project and location to make a call.</p>\n\n<p>Format: <code>projects/{project-id}/locations/{location-id}</code>.</p>\n\n<p>If no parent is specified, a region will be chosen automatically.</p>\n\n<p>Supported location-ids:\n    <code>us</code>: USA country only,\n    <code>asia</code>: East asia areas, like Japan, Taiwan,\n    <code>eu</code>: The European Union.</p>\n\n<p>Example: <code>projects/project-A/locations/eu</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::Operation)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::Operation)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#batch_annotate_files(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#batch_annotate_files
  name: "#batch_annotate_files"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#batch_annotate_files"
  summary: "Service that performs image detection and annotation for a batch of files.\nNow only &quot;application/pdf&quot;, &quot;image/tiff&quot; and &quot;image/gif&quot; are supported.</p>\n\n<p>This service will extract at most 5 (customers can specify which 5 in\nAnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each\nfile provided and perform detection and annotation for each image\nextracted."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::BatchAnnotateFilesRequest.new\n\n# Call the batch_annotate_files method.\nresult = client.batch_annotate_files request\n\n# The returned object is of type Google::Cloud::Vision::V1::BatchAnnotateFilesResponse.\np result</pre>"
  syntax:
    description: "Service that performs image detection and annotation for a batch of files.\nNow only &quot;application/pdf&quot;, &quot;image/tiff&quot; and &quot;image/gif&quot; are supported.</p>\n\n<p>This service will extract at most 5 (customers can specify which 5 in\nAnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each\nfile provided and perform detection and annotation for each image\nextracted."
    content: "def batch_annotate_files(request, options = nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateFilesResponse\ndef batch_annotate_files(requests: nil, parent: nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateFilesResponse"
    aliases: []
    overloads:
    - content: "def batch_annotate_files(request, options = nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateFilesResponse"
      description: "Pass arguments to <code>batch_annotate_files</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-BatchAnnotateFilesRequest\" title=\"Google::Cloud::Vision::V1::BatchAnnotateFilesRequest (class)\">BatchAnnotateFilesRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateFilesRequest\">::Google::Cloud::Vision::V1::BatchAnnotateFilesRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def batch_annotate_files(requests: nil, parent: nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateFilesResponse"
      description: "Pass arguments to <code>batch_annotate_files</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>requests</strong> (::Array&lt;<a href=\"./Google-Cloud-Vision-V1-AnnotateFileRequest\">::Google::Cloud::Vision::V1::AnnotateFileRequest</a>, ::Hash&gt;) — Required. The list of file annotation requests. Right now we support only\none AnnotateFileRequest in BatchAnnotateFilesRequest."
      - description: "<strong>parent</strong> (::String) — Optional. Target project and location to make a call.</p>\n\n<p>Format: <code>projects/{project-id}/locations/{location-id}</code>.</p>\n\n<p>If no parent is specified, a region will be chosen automatically.</p>\n\n<p>Supported location-ids:\n    <code>us</code>: USA country only,\n    <code>asia</code>: East asia areas, like Japan, Taiwan,\n    <code>eu</code>: The European Union.</p>\n\n<p>Example: <code>projects/project-A/locations/eu</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateFilesResponse\">::Google::Cloud::Vision::V1::BatchAnnotateFilesResponse</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateFilesResponse\">::Google::Cloud::Vision::V1::BatchAnnotateFilesResponse</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#batch_annotate_images(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#batch_annotate_images
  name: "#batch_annotate_images"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#batch_annotate_images"
  summary: "Run image detection and annotation for a batch of images."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::BatchAnnotateImagesRequest.new\n\n# Call the batch_annotate_images method.\nresult = client.batch_annotate_images request\n\n# The returned object is of type Google::Cloud::Vision::V1::BatchAnnotateImagesResponse.\np result</pre>"
  syntax:
    description: "Run image detection and annotation for a batch of images."
    content: "def batch_annotate_images(request, options = nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateImagesResponse\ndef batch_annotate_images(requests: nil, parent: nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateImagesResponse"
    aliases: []
    overloads:
    - content: "def batch_annotate_images(request, options = nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateImagesResponse"
      description: "Pass arguments to <code>batch_annotate_images</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-BatchAnnotateImagesRequest\" title=\"Google::Cloud::Vision::V1::BatchAnnotateImagesRequest (class)\">BatchAnnotateImagesRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesRequest\">::Google::Cloud::Vision::V1::BatchAnnotateImagesRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def batch_annotate_images(requests: nil, parent: nil) -> ::Google::Cloud::Vision::V1::BatchAnnotateImagesResponse"
      description: "Pass arguments to <code>batch_annotate_images</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>requests</strong> (::Array&lt;<a href=\"./Google-Cloud-Vision-V1-AnnotateImageRequest\">::Google::Cloud::Vision::V1::AnnotateImageRequest</a>, ::Hash&gt;) — Required. Individual image annotation requests for this batch."
      - description: "<strong>parent</strong> (::String) — Optional. Target project and location to make a call.</p>\n\n<p>Format: <code>projects/{project-id}/locations/{location-id}</code>.</p>\n\n<p>If no parent is specified, a region will be chosen automatically.</p>\n\n<p>Supported location-ids:\n    <code>us</code>: USA country only,\n    <code>asia</code>: East asia areas, like Japan, Taiwan,\n    <code>eu</code>: The European Union.</p>\n\n<p>Example: <code>projects/project-A/locations/eu</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">::Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">::Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#configure(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#configure
  name: "#configure"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#configure"
  summary: "Configure the ImageAnnotator Client instance.</p>\n\n<p>The configuration is set to the derived mode, meaning that values can be changed,\nbut structural changes (adding new fields, etc.) are not allowed. Structural changes\nshould be made on <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client#Google__Cloud__Vision__V1__ImageAnnotator__Client_configure_class_\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client.configure (method)\">Client.configure</a></span>.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
  type: method
  example: []
  syntax:
    description: "Configure the ImageAnnotator Client instance.</p>\n\n<p>The configuration is set to the derived mode, meaning that values can be changed,\nbut structural changes (adding new fields, etc.) are not allowed. Structural changes\nshould be made on <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client#Google__Cloud__Vision__V1__ImageAnnotator__Client_configure_class_\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client.configure (method)\">Client.configure</a></span>.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
    content: "def configure() { |config| ... } -> Client::Configuration"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Client client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\">Client::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\">Client::Configuration</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#crop_hints_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#crop_hints_detection
  name: "#crop_hints_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#crop_hints_detection"
  summary: "Detect features of type CROP_HINTS."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.crop_hints_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type CROP_HINTS."
    content: "def crop_hints_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#document_text_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#document_text_detection
  name: "#document_text_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#document_text_detection"
  summary: "Detect features of type DOCUMENT_TEXT_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.document_text_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type DOCUMENT_TEXT_DETECTION."
    content: "def document_text_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#face_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#face_detection
  name: "#face_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#face_detection"
  summary: "Detect features of type FACE_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.face_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type FACE_DETECTION."
    content: "def face_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#image_properties_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#image_properties_detection
  name: "#image_properties_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#image_properties_detection"
  summary: "Detect features of type IMAGE_PROPERTIES."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.image_properties_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type IMAGE_PROPERTIES."
    content: "def image_properties_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#initialize(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#initialize
  name: "#initialize"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#initialize"
  summary: "Create a new ImageAnnotator client object."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">\n# Create a client using the default configuration\nclient = ::Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\n# Create a client using a custom configuration\nclient = ::Google::Cloud::Vision::V1::ImageAnnotator::Client.new do |config|\n  config.timeout = 10.0\nend</pre>"
  syntax:
    description: "Create a new ImageAnnotator client object."
    content: "def initialize() { |config| ... } -> Client"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the ImageAnnotator client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration\">Client::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Client\">Client</a>) — a new instance of Client"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#label_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#label_detection
  name: "#label_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#label_detection"
  summary: "Detect features of type LABEL_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.label_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type LABEL_DETECTION."
    content: "def label_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#landmark_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#landmark_detection
  name: "#landmark_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#landmark_detection"
  summary: "Detect features of type LANDMARK_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.landmark_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type LANDMARK_DETECTION."
    content: "def landmark_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#logo_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#logo_detection
  name: "#logo_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#logo_detection"
  summary: "Detect features of type LOGO_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.logo_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type LOGO_DETECTION."
    content: "def logo_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#object_localization_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#object_localization_detection
  name: "#object_localization_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#object_localization_detection"
  summary: "Detect features of type OBJECT_LOCALIZATION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.object_localization_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type OBJECT_LOCALIZATION."
    content: "def object_localization_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#operations_client(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#operations_client
  name: "#operations_client"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#operations_client"
  summary: "Get the associated client for long-running operations."
  type: method
  example: []
  syntax:
    description: "Get the associated client for long-running operations."
    content: "def operations_client() -> ::Google::Cloud::Vision::V1::ImageAnnotator::Operations"
    aliases: []
    arguments: []
    yields: []
    yieldparams: []
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ImageAnnotator-Operations\">::Google::Cloud::Vision::V1::ImageAnnotator::Operations</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#product_search_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#product_search_detection
  name: "#product_search_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#product_search_detection"
  summary: "Detect features of type PRODUCT_SEARCH."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.product_search_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type PRODUCT_SEARCH."
    content: "def product_search_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#safe_search_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#safe_search_detection
  name: "#safe_search_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#safe_search_detection"
  summary: "Detect features of type SAFE_SEARCH_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.safe_search_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type SAFE_SEARCH_DETECTION."
    content: "def safe_search_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#text_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#text_detection
  name: "#text_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#text_detection"
  summary: "Detect features of type TEXT_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.text_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type TEXT_DETECTION."
    content: "def text_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client#web_detection(instance)
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client#web_detection
  name: "#web_detection"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#web_detection"
  summary: "Detect features of type WEB_DETECTION."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\nimage_annotator_client = Google::Cloud::Vision::V1::ImageAnnotator::Client.new\n\nresponse = image_annotator_client.web_detection image: \"path/to/image.png\"\nresponse.responses.each do |res|\n  puts res\nend</pre>"
  syntax:
    description: "Detect features of type WEB_DETECTION."
    content: "def web_detection(images: [], image: nil, max_results: 10, options: nil, async: false, mime_type: nil, batch_size: 10, destination: nil, image_context: nil, &block) { |result, operation| ... } -> Google::Cloud::Vision::V1::BatchAnnotateImagesResponse, Gapic::Operation"
    aliases: []
    arguments:
    - description: "<strong>images</strong> (Array&lt;String&gt;, Array&lt;File&gt;) <em>(defaults to: [])</em> — An array containing files, file paths, io objects, image urls, or\nGoogle Cloud Storage urls. Can be used with or instead of image."
    - description: "<strong>image</strong> (File, String) <em>(defaults to: nil)</em> — A file, file path, io object, url pointing to an image, or Google\nCloud Storage url. Can be used with or instead of images."
    - description: "<strong>max_results</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10."
    - description: "<strong>options</strong> (Gapic::CallOptions) <em>(defaults to: nil)</em> — Optional. Overrides the default settings for this call, e.g,\ntimeout, retries, etc."
    - description: "<strong>async</strong> (Boolean) <em>(defaults to: false)</em> — Optional. Defaults to <code>false</code>. If <code>false</code>, performs the request\nsynchronously, returning a <code>BatchAnnotateImagesResponse</code>. If <code>true</code>,\nperforms the request asynchronously, returning a <code>Gapic::Operation</code>."
    - description: "<strong>mime_type</strong> (String) <em>(defaults to: nil)</em> — Required only if async is <code>true</code>."
    - description: "<strong>batch_size</strong> (Integer) <em>(defaults to: 10)</em> — Optional. Defaults to 10. When async is <code>true</code>, this specifies the\nnumber of input files per output json."
    - description: "<strong>destination</strong> (String) <em>(defaults to: nil)</em> — A Google Cloud Storage location for storing the output. Required\nonly if async is <code>true</code>."
    - description: "<strong>image_context</strong> (Hash) <em>(defaults to: nil)</em> — Optional. Image context and/or feature-specific parameters."
    yields:
    - description: "(result, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>result</strong> (<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>, Gapic::Operation)"
    - description: "<strong>operation</strong> (GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-BatchAnnotateImagesResponse\">Google::Cloud::Vision::V1::BatchAnnotateImagesResponse</a>) — if async is <code>false</code>."
    - description: "(Gapic::Operation) — if async is <code>true</code>."
    raises:
    - description: "(Google::Cloud::Error) — if the RPC is aborted."
references:
- uid: Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration
  fullName: Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration
  name: Configuration
  module: google-cloud-vision-v1
  id: Configuration
  summary: "Configuration class for the ImageAnnotator API.</p>\n\n<p>This class represents the configuration for ImageAnnotator,\nproviding control over timeouts, retry behavior, logging, transport\nparameters, and other low-level controls. Certain parameters can also be\napplied individually to specific RPCs. See\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImageAnnotator-Client-Configuration-Rpcs\" title=\"Google::Cloud::Vision::V1::ImageAnnotator::Client::Configuration::Rpcs (class)\">Configuration::Rpcs</a></span>\nfor a list of RPCs that can be configured independently.</p>\n\n<p>Configuration can be applied globally to all clients, or to a single client\non construction."
  parent: Google::Cloud::Vision::V1::ImageAnnotator::Client