### YamlMime:UniversalReference
items:
- uid: Google::Api
  children: 
  - Google::Api::ResourceDescriptor
  - Google::Api::ResourceReference
  - Google::Api::FieldBehavior
  fullName: Google::Api
  langs:
  - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: Api
  summary: ""
  type: "module"
  name: Google::Api
  example: []

references:
- uid: Google::Api::ResourceDescriptor
  fullName: Google::Api::ResourceDescriptor
  name: ResourceDescriptor
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: ResourceDescriptor
  summary: "<p>A simple descriptor of a resource type.</p>\n\n<p>ResourceDescriptor annotates a resource message (either by means of a\nprotobuf annotation or use in the service config), and associates the\nresource&#39;s schema, the resource type, and the pattern of the resource name.</p>\n\n<p>Example:</p>\n\n<pre><code>message Topic {\n  // Indicates this message defines a resource schema.\n  // Declares the resource type in the format of {service}/{kind}.\n  // For Kubernetes resources, the format is {api group}/{kind}.\n  option (google.api.resource) = {\n    type: &quot;pubsub.googleapis.com/Topic&quot;\n    pattern: &quot;projects/{project}/topics/{topic}&quot;\n  };\n}\n</code></pre>\n\n<p>The ResourceDescriptor Yaml config will look like:</p>\n\n<pre><code>resources:\n- type: &quot;pubsub.googleapis.com/Topic&quot;\n  pattern: &quot;projects/{project}/topics/{topic}&quot;\n</code></pre>\n\n<p>Sometimes, resources have multiple patterns, typically because they can\nlive under multiple parents.</p>\n\n<p>Example:</p>\n\n<pre><code>message LogEntry {\n  option (google.api.resource) = {\n    type: &quot;logging.googleapis.com/LogEntry&quot;\n    pattern: &quot;projects/{project}/logs/{log}&quot;\n    pattern: &quot;folders/{folder}/logs/{log}&quot;\n    pattern: &quot;organizations/{organization}/logs/{log}&quot;\n    pattern: &quot;billingAccounts/{billing_account}/logs/{log}&quot;\n  };\n}\n</code></pre>\n\n<p>The ResourceDescriptor Yaml config will look like:</p>\n\n<pre><code>resources:\n- type: &#39;logging.googleapis.com/LogEntry&#39;\n  pattern: &quot;projects/{project}/logs/{log}&quot;\n  pattern: &quot;folders/{folder}/logs/{log}&quot;\n  pattern: &quot;organizations/{organization}/logs/{log}&quot;\n  pattern: &quot;billingAccounts/{billing_account}/logs/{log}&quot;\n</code></pre>"
  parent: Google::Api
- uid: Google::Api::ResourceReference
  fullName: Google::Api::ResourceReference
  name: ResourceReference
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: ResourceReference
  summary: "Defines a proto annotation that describes a string field that refers to\nan API resource."
  parent: Google::Api
- uid: Google::Api::FieldBehavior
  fullName: Google::Api::FieldBehavior
  name: FieldBehavior
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: FieldBehavior
  summary: "An indicator of the behavior of a given field (for example, that a field\nis required in requests, or given as output but ignored as input).\nThis <strong>does not</strong> change the behavior in protocol buffers itself; it only\ndenotes the behavior and may affect how API tooling handles the field.</p>\n\n<p>Note: This enum <strong>may</strong> receive new values in the future."
  parent: Google::Api