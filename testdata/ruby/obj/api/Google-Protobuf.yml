### YamlMime:UniversalReference
items:
  - uid: Google::Protobuf
    children: 
      - Google::Protobuf::Any
      - Google::Protobuf::Empty
      - Google::Protobuf::Duration
      - Google::Protobuf::DoubleValue
      - Google::Protobuf::FloatValue
      - Google::Protobuf::Int64Value
      - Google::Protobuf::UInt64Value
      - Google::Protobuf::Int32Value
      - Google::Protobuf::UInt32Value
      - Google::Protobuf::BoolValue
      - Google::Protobuf::StringValue
      - Google::Protobuf::BytesValue
      - Google::Protobuf::Timestamp
      - Google::Protobuf::FieldMask
    fullName: Google::Protobuf
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: Protobuf
    summary: ""
    type: "module"
    name: Google::Protobuf

references: 
  - uid: Google::Protobuf::Any
    fullName: Google::Protobuf::Any
    name: Any
    module: google-cloud-vision-v1
    id: Any
    summary: "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n<pre class=\"prettyprint lang-rb\">Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&foo)) {\n  ...\n}</pre>\n\nExample 2: Pack and unpack a message in Java.\n\n<pre class=\"prettyprint lang-rb\">Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n\n Example 3: Pack and unpack a message in Python.\n\nfoo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n\n Example 4: Pack and unpack a message in Go\n\n foo := &pb.Foo{...}\n any, err := anypb.New(foo)\n if err != nil {\n   ...\n }\n ...\n foo := &pb.Foo{}\n if err := any.UnmarshalTo(foo); err != nil {\n   ...\n }</pre>\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n<pre class=\"prettyprint lang-rb\">package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": <string>,\n  \"lastName\": <string>\n}</pre>\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n<pre class=\"prettyprint lang-rb\">{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}</pre>"
    parent: Google::Protobuf

  - uid: Google::Protobuf::Empty
    fullName: Google::Protobuf::Empty
    name: Empty
    module: google-cloud-vision-v1
    id: Empty
    summary: "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n<pre class=\"prettyprint lang-rb\">service Foo {\n  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n}</pre>\n\nThe JSON representation for `Empty` is empty JSON object `{}`."
    parent: Google::Protobuf

  - uid: Google::Protobuf::Duration
    fullName: Google::Protobuf::Duration
    name: Duration
    module: google-cloud-vision-v1
    id: Duration
    summary: "A Duration represents a signed, fixed-length span of time represented\nas a count of seconds and fractions of seconds at nanosecond\nresolution. It is independent of any calendar and concepts like \"day\"\nor \"month\". It is related to Timestamp in that the difference between\ntwo Timestamp values is a Duration and it can be added or subtracted\nfrom a Timestamp. Range is approximately +-10,000 years.\n\n## Examples\n\nExample 1: Compute Duration from two Timestamps in pseudo code.\n\n<pre class=\"prettyprint lang-rb\">Timestamp start = ...;\nTimestamp end = ...;\nDuration duration = ...;\n\nduration.seconds = end.seconds - start.seconds;\nduration.nanos = end.nanos - start.nanos;\n\nif (duration.seconds < 0 && duration.nanos > 0) {\n  duration.seconds += 1;\n  duration.nanos -= 1000000000;\n} else if (duration.seconds > 0 && duration.nanos < 0) {\n  duration.seconds -= 1;\n  duration.nanos += 1000000000;\n}</pre>\n\nExample 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n<pre class=\"prettyprint lang-rb\">Timestamp start = ...;\nDuration duration = ...;\nTimestamp end = ...;\n\nend.seconds = start.seconds + duration.seconds;\nend.nanos = start.nanos + duration.nanos;\n\nif (end.nanos < 0) {\n  end.seconds -= 1;\n  end.nanos += 1000000000;\n} else if (end.nanos >= 1000000000) {\n  end.seconds += 1;\n  end.nanos -= 1000000000;\n}</pre>\n\nExample 3: Compute Duration from datetime.timedelta in Python.\n\n<pre class=\"prettyprint lang-rb\">td = datetime.timedelta(days=3, minutes=10)\nduration = Duration()\nduration.FromTimedelta(td)</pre>\n\n## JSON Mapping\n\nIn JSON format, the Duration type is encoded as a string rather than an\nobject, where the string ends in the suffix \"s\" (indicating seconds) and\nis preceded by the number of seconds, with nanoseconds expressed as\nfractional seconds. For example, 3 seconds with 0 nanoseconds should be\nencoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\nbe expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\nmicrosecond should be expressed in JSON format as \"3.000001s\"."
    parent: Google::Protobuf

  - uid: Google::Protobuf::DoubleValue
    fullName: Google::Protobuf::DoubleValue
    name: DoubleValue
    module: google-cloud-vision-v1
    id: DoubleValue
    summary: "Wrapper message for `double`.\n\nThe JSON representation for `DoubleValue` is JSON number."
    parent: Google::Protobuf

  - uid: Google::Protobuf::FloatValue
    fullName: Google::Protobuf::FloatValue
    name: FloatValue
    module: google-cloud-vision-v1
    id: FloatValue
    summary: "Wrapper message for `float`.\n\nThe JSON representation for `FloatValue` is JSON number."
    parent: Google::Protobuf

  - uid: Google::Protobuf::Int64Value
    fullName: Google::Protobuf::Int64Value
    name: Int64Value
    module: google-cloud-vision-v1
    id: Int64Value
    summary: "Wrapper message for `int64`.\n\nThe JSON representation for `Int64Value` is JSON string."
    parent: Google::Protobuf

  - uid: Google::Protobuf::UInt64Value
    fullName: Google::Protobuf::UInt64Value
    name: UInt64Value
    module: google-cloud-vision-v1
    id: UInt64Value
    summary: "Wrapper message for `uint64`.\n\nThe JSON representation for `UInt64Value` is JSON string."
    parent: Google::Protobuf

  - uid: Google::Protobuf::Int32Value
    fullName: Google::Protobuf::Int32Value
    name: Int32Value
    module: google-cloud-vision-v1
    id: Int32Value
    summary: "Wrapper message for `int32`.\n\nThe JSON representation for `Int32Value` is JSON number."
    parent: Google::Protobuf

  - uid: Google::Protobuf::UInt32Value
    fullName: Google::Protobuf::UInt32Value
    name: UInt32Value
    module: google-cloud-vision-v1
    id: UInt32Value
    summary: "Wrapper message for `uint32`.\n\nThe JSON representation for `UInt32Value` is JSON number."
    parent: Google::Protobuf

  - uid: Google::Protobuf::BoolValue
    fullName: Google::Protobuf::BoolValue
    name: BoolValue
    module: google-cloud-vision-v1
    id: BoolValue
    summary: "Wrapper message for `bool`.\n\nThe JSON representation for `BoolValue` is JSON `true` and `false`."
    parent: Google::Protobuf

  - uid: Google::Protobuf::StringValue
    fullName: Google::Protobuf::StringValue
    name: StringValue
    module: google-cloud-vision-v1
    id: StringValue
    summary: "Wrapper message for `string`.\n\nThe JSON representation for `StringValue` is JSON string."
    parent: Google::Protobuf

  - uid: Google::Protobuf::BytesValue
    fullName: Google::Protobuf::BytesValue
    name: BytesValue
    module: google-cloud-vision-v1
    id: BytesValue
    summary: "Wrapper message for `bytes`.\n\nThe JSON representation for `BytesValue` is JSON string."
    parent: Google::Protobuf

  - uid: Google::Protobuf::Timestamp
    fullName: Google::Protobuf::Timestamp
    name: Timestamp
    module: google-cloud-vision-v1
    id: Timestamp
    summary: "A Timestamp represents a point in time independent of any time zone or local\ncalendar, encoded as a count of seconds and fractions of seconds at\nnanosecond resolution. The count is relative to an epoch at UTC midnight on\nJanuary 1, 1970, in the proleptic Gregorian calendar which extends the\nGregorian calendar backwards to year one.\n\nAll minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\nsecond table is needed for interpretation, using a [24-hour linear\nsmear](https://developers.google.com/time/smear).\n\nThe range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\nrestricting to that range, we ensure that we can convert to and from [RFC\n3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n## Examples\n\nExample 1: Compute Timestamp from POSIX `time()`.\n\n<pre class=\"prettyprint lang-rb\">Timestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);</pre>\n\nExample 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n<pre class=\"prettyprint lang-rb\">struct timeval tv;\ngettimeofday(&tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);</pre>\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n<pre class=\"prettyprint lang-rb\">FILETIME ft;\nGetSystemTimeAsFileTime(&ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n// A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n// is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));</pre>\n\nExample 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n<pre class=\"prettyprint lang-rb\">long millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n    .setNanos((int) ((millis % 1000) * 1000000)).build();</pre>\n\n\nExample 5: Compute Timestamp from Java `Instant.now()`.\n\n<pre class=\"prettyprint lang-rb\">Instant now = Instant.now();\n\nTimestamp timestamp =\n    Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n        .setNanos(now.getNano()).build();</pre>\n\n\nExample 6: Compute Timestamp from current time in Python.\n\n<pre class=\"prettyprint lang-rb\">timestamp = Timestamp()\ntimestamp.GetCurrentTime()</pre>\n\n## JSON Mapping\n\nIn JSON format, the Timestamp type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere {year} is always expressed using four digits while {month}, {day},\n{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\nis required. A proto3 JSON serializer should always use UTC (as indicated by\n\"Z\") when printing the Timestamp type and a proto3 JSON parser should be\nable to accept both UTC and other timezones (as indicated by an offset).\n\nFor example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\nIn JavaScript, one can convert a Date object to this format using the\nstandard\n[toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\nmethod. In Python, a standard `datetime.datetime` object can be converted\nto this format using\n[`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\nthe time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\nthe Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n) to obtain a formatter capable of generating timestamps in this format."
    parent: Google::Protobuf

  - uid: Google::Protobuf::FieldMask
    fullName: Google::Protobuf::FieldMask
    name: FieldMask
    module: google-cloud-vision-v1
    id: FieldMask
    summary: "`FieldMask` represents a set of symbolic field paths, for example:\n\n<pre class=\"prettyprint lang-rb\">paths: \"f.a\"\npaths: \"f.b.d\"</pre>\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n## Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n<pre class=\"prettyprint lang-rb\">f {\n  a : 22\n  b {\n    d : 1\n    x : 2\n  }\n  y : 13\n}\nz: 8</pre>\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n<pre class=\"prettyprint lang-rb\">f {\n  a : 22\n  b {\n    d : 1\n  }\n}</pre>\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n## Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n<pre class=\"prettyprint lang-rb\">f {\n  b {\n    d: 1\n    x: 2\n  }\n  c: [1]\n}</pre>\n\nAnd an update message:\n\n<pre class=\"prettyprint lang-rb\">f {\n  b {\n    d: 10\n  }\n  c: [2]\n}</pre>\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n<pre class=\"prettyprint lang-rb\">f {\n  b {\n    d: 10\n    x: 2\n  }\n  c: [1, 2]\n}</pre>\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n### Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n## JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n<pre class=\"prettyprint lang-rb\">message Profile {\n  User user = 1;\n  Photo photo = 2;\n}\nmessage User {\n  string display_name = 1;\n  string address = 2;\n}</pre>\n\nIn proto a field mask for `Profile` may look as such:\n\n<pre class=\"prettyprint lang-rb\">mask {\n  paths: \"user.display_name\"\n  paths: \"photo\"\n}</pre>\n\nIn JSON, the same mask is represented as below:\n\n<pre class=\"prettyprint lang-rb\">{\n  mask: \"user.displayName,photo\"\n}</pre>\n\n## Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n<pre class=\"prettyprint lang-rb\">message SampleMessage {\n  oneof test_oneof {\n    string name = 4;\n    SubMessage sub_message = 9;\n  }\n}</pre>\n\nThe field mask can be:\n\n<pre class=\"prettyprint lang-rb\">mask {\n  paths: \"name\"\n}</pre>\n\nOr:\n\n<pre class=\"prettyprint lang-rb\">mask {\n  paths: \"sub_message\"\n}</pre>\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n### Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable."
    parent: Google::Protobuf

