### YamlMime:UniversalReference
items:
- uid: Google::Cloud::Vision::V1::ProductSearch::Client
  children: 
  - Google::Cloud::Vision::V1::ProductSearch::Client.configure(class)
  - Google::Cloud::Vision::V1::ProductSearch::Client#add_product_to_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#configure(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#create_product(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#create_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#create_reference_image(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#delete_product(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#delete_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#delete_reference_image(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#get_product(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#get_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#get_reference_image(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#import_product_sets(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#initialize(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#list_product_sets(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#list_products(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#list_products_in_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#list_reference_images(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#operations_client(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#purge_products(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#remove_product_from_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#update_product(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client#update_product_set(instance)
  - Google::Cloud::Vision::V1::ProductSearch::Client::Configuration
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client
  langs:
  - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: Client
  summary: "<p>Client for the ProductSearch service.</p>\n\n<p>Manages Products and ProductSets of reference images for use in product\nsearch. It uses the following resource model:</p>\n\n<ul>\n<li>The API has a collection of <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSet\" title=\"Google::Cloud::Vision::V1::ProductSet (class)\">ProductSet</a></span> resources, named\n<code>projects/*/locations/*/productSets/*</code>, which acts as a way to put different\nproducts into groups to limit identification.</li>\n</ul>\n\n<p>In parallel,</p>\n\n<ul>\n<li><p>The API has a collection of <span class='object_link'><a href=\"Google-Cloud-Vision-V1-Product\" title=\"Google::Cloud::Vision::V1::Product (class)\">Product</a></span> resources, named\n<code>projects/*/locations/*/products/*</code></p></li>\n<li><p>Each <span class='object_link'><a href=\"Google-Cloud-Vision-V1-Product\" title=\"Google::Cloud::Vision::V1::Product (class)\">Product</a></span> has a collection of <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ReferenceImage\" title=\"Google::Cloud::Vision::V1::ReferenceImage (class)\">ReferenceImage</a></span> resources, named\n<code>projects/*/locations/*/products/*/referenceImages/*</code></p></li>\n</ul>"
  type: "class"
  name: Google::Cloud::Vision::V1::ProductSearch::Client
  example: []
  inherits:
  - "Object"
  includes:
  - "<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Paths\">Google::Cloud::Vision::V1::ProductSearch::Paths</a>"
- uid: Google::Cloud::Vision::V1::ProductSearch::Client.configure(class)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client.configure
  name: ".configure"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: ".configure"
  summary: "Configure the ProductSearch Client class.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">\n# Modify the configuration for all ProductSearch clients\n::Google::Cloud::Vision::V1::ProductSearch::Client.configure do |config|\n  config.timeout = 10.0\nend</pre>"
  syntax:
    description: "Configure the ProductSearch Client class.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
    content: "def self.configure() { |config| ... } -> Client::Configuration"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Client client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\">Client::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\">Client::Configuration</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#add_product_to_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#add_product_to_product_set
  name: "#add_product_to_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#add_product_to_product_set"
  summary: "<p>Adds a Product to the specified ProductSet. If the Product is already\npresent, no change is made.</p>\n\n<p>One Product can be added to at most 100 ProductSets.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the Product or the ProductSet doesn&#39;t exist.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::AddProductToProductSetRequest.new\n\n# Call the add_product_to_product_set method.\nresult = client.add_product_to_product_set request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "<p>Adds a Product to the specified ProductSet. If the Product is already\npresent, no change is made.</p>\n\n<p>One Product can be added to at most 100 ProductSets.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the Product or the ProductSet doesn&#39;t exist.</li>\n</ul>"
    content: "def add_product_to_product_set(request, options = nil) -> ::Google::Protobuf::Empty\ndef add_product_to_product_set(name: nil, product: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def add_product_to_product_set(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>add_product_to_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-AddProductToProductSetRequest\" title=\"Google::Cloud::Vision::V1::AddProductToProductSetRequest (class)\">AddProductToProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-AddProductToProductSetRequest\">::Google::Cloud::Vision::V1::AddProductToProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def add_product_to_product_set(name: nil, product: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>add_product_to_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. The resource name for the ProductSet to modify.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID</code>"
      - description: "<strong>product</strong> (::String) — Required. The resource name for the Product to be added to this ProductSet.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#configure(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#configure
  name: "#configure"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#configure"
  summary: "Configure the ProductSearch Client instance.</p>\n\n<p>The configuration is set to the derived mode, meaning that values can be changed,\nbut structural changes (adding new fields, etc.) are not allowed. Structural changes\nshould be made on <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client#Google__Cloud__Vision__V1__ProductSearch__Client_configure_class_\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client.configure (method)\">Client.configure</a></span>.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
  type: method
  example: []
  syntax:
    description: "Configure the ProductSearch Client instance.</p>\n\n<p>The configuration is set to the derived mode, meaning that values can be changed,\nbut structural changes (adding new fields, etc.) are not allowed. Structural changes\nshould be made on <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client#Google__Cloud__Vision__V1__ProductSearch__Client_configure_class_\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client.configure (method)\">Client.configure</a></span>.</p>\n\n<p>See <span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client::Configuration (class)\">Configuration</a></span>\nfor a description of the configuration fields."
    content: "def configure() { |config| ... } -> Client::Configuration"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the Client client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\">Client::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\">Client::Configuration</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#create_product(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#create_product
  name: "#create_product"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#create_product"
  summary: "<p>Creates and returns a new product resource.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if display_name is missing or longer than 4096\ncharacters.</li>\n<li>Returns INVALID_ARGUMENT if description is longer than 4096 characters.</li>\n<li>Returns INVALID_ARGUMENT if product_category is missing or invalid.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::CreateProductRequest.new\n\n# Call the create_product method.\nresult = client.create_product request\n\n# The returned object is of type Google::Cloud::Vision::V1::Product.\np result</pre>"
  syntax:
    description: "<p>Creates and returns a new product resource.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if display_name is missing or longer than 4096\ncharacters.</li>\n<li>Returns INVALID_ARGUMENT if description is longer than 4096 characters.</li>\n<li>Returns INVALID_ARGUMENT if product_category is missing or invalid.</li>\n</ul>"
    content: "def create_product(request, options = nil) -> ::Google::Cloud::Vision::V1::Product\ndef create_product(parent: nil, product: nil, product_id: nil) -> ::Google::Cloud::Vision::V1::Product"
    aliases: []
    overloads:
    - content: "def create_product(request, options = nil) -> ::Google::Cloud::Vision::V1::Product"
      description: "Pass arguments to <code>create_product</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-CreateProductRequest\" title=\"Google::Cloud::Vision::V1::CreateProductRequest (class)\">CreateProductRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-CreateProductRequest\">::Google::Cloud::Vision::V1::CreateProductRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def create_product(parent: nil, product: nil, product_id: nil) -> ::Google::Cloud::Vision::V1::Product"
      description: "Pass arguments to <code>create_product</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. The project in which the Product should be created.</p>\n\n<p>Format is\n<code>projects/PROJECT_ID/locations/LOC_ID</code>."
      - description: "<strong>product</strong> (<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>, ::Hash) — Required. The product to create."
      - description: "<strong>product_id</strong> (::String) — A user-supplied resource id for this Product. If set, the server will\nattempt to use this value as the resource id. If it is already in use, an\nerror is returned with code ALREADY_EXISTS. Must be at most 128 characters\nlong. It cannot contain the character <code>/</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#create_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#create_product_set
  name: "#create_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#create_product_set"
  summary: "<p>Creates and returns a new ProductSet resource.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if display_name is missing, or is longer than\n4096 characters.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::CreateProductSetRequest.new\n\n# Call the create_product_set method.\nresult = client.create_product_set request\n\n# The returned object is of type Google::Cloud::Vision::V1::ProductSet.\np result</pre>"
  syntax:
    description: "<p>Creates and returns a new ProductSet resource.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if display_name is missing, or is longer than\n4096 characters.</li>\n</ul>"
    content: "def create_product_set(request, options = nil) -> ::Google::Cloud::Vision::V1::ProductSet\ndef create_product_set(parent: nil, product_set: nil, product_set_id: nil) -> ::Google::Cloud::Vision::V1::ProductSet"
    aliases: []
    overloads:
    - content: "def create_product_set(request, options = nil) -> ::Google::Cloud::Vision::V1::ProductSet"
      description: "Pass arguments to <code>create_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-CreateProductSetRequest\" title=\"Google::Cloud::Vision::V1::CreateProductSetRequest (class)\">CreateProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-CreateProductSetRequest\">::Google::Cloud::Vision::V1::CreateProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def create_product_set(parent: nil, product_set: nil, product_set_id: nil) -> ::Google::Cloud::Vision::V1::ProductSet"
      description: "Pass arguments to <code>create_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. The project in which the ProductSet should be created.</p>\n\n<p>Format is <code>projects/PROJECT_ID/locations/LOC_ID</code>."
      - description: "<strong>product_set</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>, ::Hash) — Required. The ProductSet to create."
      - description: "<strong>product_set_id</strong> (::String) — A user-supplied resource id for this ProductSet. If set, the server will\nattempt to use this value as the resource id. If it is already in use, an\nerror is returned with code ALREADY_EXISTS. Must be at most 128 characters\nlong. It cannot contain the character <code>/</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#create_reference_image(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#create_reference_image
  name: "#create_reference_image"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#create_reference_image"
  summary: "<p>Creates and returns a new ReferenceImage resource.</p>\n\n<p>The <code>bounding_poly</code> field is optional. If <code>bounding_poly</code> is not specified,\nthe system will try to detect regions of interest in the image that are\ncompatible with the product_category on the parent product. If it is\nspecified, detection is ALWAYS skipped. The system converts polygons into\nnon-rotated rectangles.</p>\n\n<p>Note that the pipeline will resize the image if the image resolution is too\nlarge to process (above 50MP).</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096\ncharacters.</li>\n<li>Returns INVALID_ARGUMENT if the product does not exist.</li>\n<li>Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing\ncompatible with the parent product&#39;s product_category is detected.</li>\n<li>Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::CreateReferenceImageRequest.new\n\n# Call the create_reference_image method.\nresult = client.create_reference_image request\n\n# The returned object is of type Google::Cloud::Vision::V1::ReferenceImage.\np result</pre>"
  syntax:
    description: "<p>Creates and returns a new ReferenceImage resource.</p>\n\n<p>The <code>bounding_poly</code> field is optional. If <code>bounding_poly</code> is not specified,\nthe system will try to detect regions of interest in the image that are\ncompatible with the product_category on the parent product. If it is\nspecified, detection is ALWAYS skipped. The system converts polygons into\nnon-rotated rectangles.</p>\n\n<p>Note that the pipeline will resize the image if the image resolution is too\nlarge to process (above 50MP).</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096\ncharacters.</li>\n<li>Returns INVALID_ARGUMENT if the product does not exist.</li>\n<li>Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing\ncompatible with the parent product&#39;s product_category is detected.</li>\n<li>Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.</li>\n</ul>"
    content: "def create_reference_image(request, options = nil) -> ::Google::Cloud::Vision::V1::ReferenceImage\ndef create_reference_image(parent: nil, reference_image: nil, reference_image_id: nil) -> ::Google::Cloud::Vision::V1::ReferenceImage"
    aliases: []
    overloads:
    - content: "def create_reference_image(request, options = nil) -> ::Google::Cloud::Vision::V1::ReferenceImage"
      description: "Pass arguments to <code>create_reference_image</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-CreateReferenceImageRequest\" title=\"Google::Cloud::Vision::V1::CreateReferenceImageRequest (class)\">CreateReferenceImageRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-CreateReferenceImageRequest\">::Google::Cloud::Vision::V1::CreateReferenceImageRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def create_reference_image(parent: nil, reference_image: nil, reference_image_id: nil) -> ::Google::Cloud::Vision::V1::ReferenceImage"
      description: "Pass arguments to <code>create_reference_image</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. Resource name of the product in which to create the reference image.</p>\n\n<p>Format is\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID</code>."
      - description: "<strong>reference_image</strong> (<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>, ::Hash) — Required. The reference image to create.\nIf an image ID is specified, it is ignored."
      - description: "<strong>reference_image_id</strong> (::String) — A user-supplied resource id for the ReferenceImage to be added. If set,\nthe server will attempt to use this value as the resource id. If it is\nalready in use, an error is returned with code ALREADY_EXISTS. Must be at\nmost 128 characters long. It cannot contain the character <code>/</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#delete_product(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#delete_product
  name: "#delete_product"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#delete_product"
  summary: "Permanently deletes a product and its reference images.</p>\n\n<p>Metadata of the product and all its images will be deleted right away, but\nsearch queries against ProductSets containing the product may still work\nuntil all related caches are refreshed."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::DeleteProductRequest.new\n\n# Call the delete_product method.\nresult = client.delete_product request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "Permanently deletes a product and its reference images.</p>\n\n<p>Metadata of the product and all its images will be deleted right away, but\nsearch queries against ProductSets containing the product may still work\nuntil all related caches are refreshed."
    content: "def delete_product(request, options = nil) -> ::Google::Protobuf::Empty\ndef delete_product(name: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def delete_product(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_product</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-DeleteProductRequest\" title=\"Google::Cloud::Vision::V1::DeleteProductRequest (class)\">DeleteProductRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-DeleteProductRequest\">::Google::Cloud::Vision::V1::DeleteProductRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def delete_product(name: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_product</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. Resource name of product to delete.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#delete_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#delete_product_set
  name: "#delete_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#delete_product_set"
  summary: "Permanently deletes a ProductSet. Products and ReferenceImages in the\nProductSet are not deleted.</p>\n\n<p>The actual image files are not deleted from Google Cloud Storage."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::DeleteProductSetRequest.new\n\n# Call the delete_product_set method.\nresult = client.delete_product_set request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "Permanently deletes a ProductSet. Products and ReferenceImages in the\nProductSet are not deleted.</p>\n\n<p>The actual image files are not deleted from Google Cloud Storage."
    content: "def delete_product_set(request, options = nil) -> ::Google::Protobuf::Empty\ndef delete_product_set(name: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def delete_product_set(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-DeleteProductSetRequest\" title=\"Google::Cloud::Vision::V1::DeleteProductSetRequest (class)\">DeleteProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-DeleteProductSetRequest\">::Google::Cloud::Vision::V1::DeleteProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def delete_product_set(name: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. Resource name of the ProductSet to delete.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#delete_reference_image(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#delete_reference_image
  name: "#delete_reference_image"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#delete_reference_image"
  summary: "Permanently deletes a reference image.</p>\n\n<p>The image metadata will be deleted right away, but search queries\nagainst ProductSets containing the image may still work until all related\ncaches are refreshed.</p>\n\n<p>The actual image files are not deleted from Google Cloud Storage."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::DeleteReferenceImageRequest.new\n\n# Call the delete_reference_image method.\nresult = client.delete_reference_image request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "Permanently deletes a reference image.</p>\n\n<p>The image metadata will be deleted right away, but search queries\nagainst ProductSets containing the image may still work until all related\ncaches are refreshed.</p>\n\n<p>The actual image files are not deleted from Google Cloud Storage."
    content: "def delete_reference_image(request, options = nil) -> ::Google::Protobuf::Empty\ndef delete_reference_image(name: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def delete_reference_image(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_reference_image</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-DeleteReferenceImageRequest\" title=\"Google::Cloud::Vision::V1::DeleteReferenceImageRequest (class)\">DeleteReferenceImageRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-DeleteReferenceImageRequest\">::Google::Cloud::Vision::V1::DeleteReferenceImageRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def delete_reference_image(name: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>delete_reference_image</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. The resource name of the reference image to delete.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#get_product(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#get_product
  name: "#get_product"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#get_product"
  summary: "<p>Gets information associated with a Product.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the Product does not exist.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::GetProductRequest.new\n\n# Call the get_product method.\nresult = client.get_product request\n\n# The returned object is of type Google::Cloud::Vision::V1::Product.\np result</pre>"
  syntax:
    description: "<p>Gets information associated with a Product.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the Product does not exist.</li>\n</ul>"
    content: "def get_product(request, options = nil) -> ::Google::Cloud::Vision::V1::Product\ndef get_product(name: nil) -> ::Google::Cloud::Vision::V1::Product"
    aliases: []
    overloads:
    - content: "def get_product(request, options = nil) -> ::Google::Cloud::Vision::V1::Product"
      description: "Pass arguments to <code>get_product</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-GetProductRequest\" title=\"Google::Cloud::Vision::V1::GetProductRequest (class)\">GetProductRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-GetProductRequest\">::Google::Cloud::Vision::V1::GetProductRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def get_product(name: nil) -> ::Google::Cloud::Vision::V1::Product"
      description: "Pass arguments to <code>get_product</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. Resource name of the Product to get.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#get_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#get_product_set
  name: "#get_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#get_product_set"
  summary: "<p>Gets information associated with a ProductSet.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the ProductSet does not exist.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::GetProductSetRequest.new\n\n# Call the get_product_set method.\nresult = client.get_product_set request\n\n# The returned object is of type Google::Cloud::Vision::V1::ProductSet.\np result</pre>"
  syntax:
    description: "<p>Gets information associated with a ProductSet.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the ProductSet does not exist.</li>\n</ul>"
    content: "def get_product_set(request, options = nil) -> ::Google::Cloud::Vision::V1::ProductSet\ndef get_product_set(name: nil) -> ::Google::Cloud::Vision::V1::ProductSet"
    aliases: []
    overloads:
    - content: "def get_product_set(request, options = nil) -> ::Google::Cloud::Vision::V1::ProductSet"
      description: "Pass arguments to <code>get_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-GetProductSetRequest\" title=\"Google::Cloud::Vision::V1::GetProductSetRequest (class)\">GetProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-GetProductSetRequest\">::Google::Cloud::Vision::V1::GetProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def get_product_set(name: nil) -> ::Google::Cloud::Vision::V1::ProductSet"
      description: "Pass arguments to <code>get_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. Resource name of the ProductSet to get.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#get_reference_image(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#get_reference_image
  name: "#get_reference_image"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#get_reference_image"
  summary: "<p>Gets information associated with a ReferenceImage.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the specified image does not exist.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::GetReferenceImageRequest.new\n\n# Call the get_reference_image method.\nresult = client.get_reference_image request\n\n# The returned object is of type Google::Cloud::Vision::V1::ReferenceImage.\np result</pre>"
  syntax:
    description: "<p>Gets information associated with a ReferenceImage.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the specified image does not exist.</li>\n</ul>"
    content: "def get_reference_image(request, options = nil) -> ::Google::Cloud::Vision::V1::ReferenceImage\ndef get_reference_image(name: nil) -> ::Google::Cloud::Vision::V1::ReferenceImage"
    aliases: []
    overloads:
    - content: "def get_reference_image(request, options = nil) -> ::Google::Cloud::Vision::V1::ReferenceImage"
      description: "Pass arguments to <code>get_reference_image</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-GetReferenceImageRequest\" title=\"Google::Cloud::Vision::V1::GetReferenceImageRequest (class)\">GetReferenceImageRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-GetReferenceImageRequest\">::Google::Cloud::Vision::V1::GetReferenceImageRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def get_reference_image(name: nil) -> ::Google::Cloud::Vision::V1::ReferenceImage"
      description: "Pass arguments to <code>get_reference_image</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. The resource name of the ReferenceImage to get.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#import_product_sets(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#import_product_sets
  name: "#import_product_sets"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#import_product_sets"
  summary: "Asynchronous API that imports a list of reference images to specified\nproduct sets based on a list of image information.</p>\n\n<p>The <span class='object_link'><a href=\"Google-Longrunning-Operation\" title=\"Google::Longrunning::Operation (class)\">google.longrunning.Operation</a></span> API can be used to keep track of the\nprogress and results of the request.\n<code>Operation.metadata</code> contains <code>BatchOperationMetadata</code>. (progress)\n<code>Operation.response</code> contains <code>ImportProductSetsResponse</code>. (results)</p>\n\n<p>The input source of this method is a csv file on Google Cloud Storage.\nFor the format of the csv file please see\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImportProductSetsGcsSource#Google__Cloud__Vision__V1__ImportProductSetsGcsSource_csv_file_uri_instance_\" title=\"Google::Cloud::Vision::V1::ImportProductSetsGcsSource#csv_file_uri (method)\">ImportProductSetsGcsSource.csv&lowbar;file&lowbar;uri</a></span>."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::ImportProductSetsRequest.new\n\n# Call the import_product_sets method.\nresult = client.import_product_sets request\n\n# The returned object is of type Gapic::Operation. You can use this\n# object to check the status of an operation, cancel it, or wait\n# for results. Here is how to block until completion:\nresult.wait_until_done! timeout: 60\nif result.response?\n  p result.response\nelse\n  puts \"Error!\"\nend</pre>"
  syntax:
    description: "Asynchronous API that imports a list of reference images to specified\nproduct sets based on a list of image information.</p>\n\n<p>The <span class='object_link'><a href=\"Google-Longrunning-Operation\" title=\"Google::Longrunning::Operation (class)\">google.longrunning.Operation</a></span> API can be used to keep track of the\nprogress and results of the request.\n<code>Operation.metadata</code> contains <code>BatchOperationMetadata</code>. (progress)\n<code>Operation.response</code> contains <code>ImportProductSetsResponse</code>. (results)</p>\n\n<p>The input source of this method is a csv file on Google Cloud Storage.\nFor the format of the csv file please see\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImportProductSetsGcsSource#Google__Cloud__Vision__V1__ImportProductSetsGcsSource_csv_file_uri_instance_\" title=\"Google::Cloud::Vision::V1::ImportProductSetsGcsSource#csv_file_uri (method)\">ImportProductSetsGcsSource.csv&lowbar;file&lowbar;uri</a></span>."
    content: "def import_product_sets(request, options = nil) -> ::Gapic::Operation\ndef import_product_sets(parent: nil, input_config: nil) -> ::Gapic::Operation"
    aliases: []
    overloads:
    - content: "def import_product_sets(request, options = nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>import_product_sets</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ImportProductSetsRequest\" title=\"Google::Cloud::Vision::V1::ImportProductSetsRequest (class)\">ImportProductSetsRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-ImportProductSetsRequest\">::Google::Cloud::Vision::V1::ImportProductSetsRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def import_product_sets(parent: nil, input_config: nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>import_product_sets</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. The project in which the ProductSets should be imported.</p>\n\n<p>Format is <code>projects/PROJECT_ID/locations/LOC_ID</code>."
      - description: "<strong>input_config</strong> (<a href=\"./Google-Cloud-Vision-V1-ImportProductSetsInputConfig\">::Google::Cloud::Vision::V1::ImportProductSetsInputConfig</a>, ::Hash) — Required. The input content for the list of requests."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::Operation)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::Operation)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#initialize(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#initialize
  name: "#initialize"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#initialize"
  summary: "Create a new ProductSearch client object."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">\n# Create a client using the default configuration\nclient = ::Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a client using a custom configuration\nclient = ::Google::Cloud::Vision::V1::ProductSearch::Client.new do |config|\n  config.timeout = 10.0\nend</pre>"
  syntax:
    description: "Create a new ProductSearch client object."
    content: "def initialize() { |config| ... } -> Client"
    aliases: []
    arguments: []
    yields:
    - description: "(config) — Configure the ProductSearch client."
    yieldparams:
    - description: "<strong>config</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Client-Configuration\">Client::Configuration</a>)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Client\">Client</a>) — a new instance of Client"
    raises: []
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#list_product_sets(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#list_product_sets
  name: "#list_product_sets"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#list_product_sets"
  summary: "<p>Lists ProductSets in an unspecified order.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if page_size is greater than 100, or less\nthan 1.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::ListProductSetsRequest.new\n\n# Call the list_product_sets method.\nresult = client.list_product_sets request\n\n# The returned object is of type Gapic::PagedEnumerable. You can\n# iterate over all elements by calling #each, and the enumerable\n# will lazily make API calls to fetch subsequent pages. Other\n# methods are also available for managing paging directly.\nresult.each do |response|\n  # Each element is of type ::Google::Cloud::Vision::V1::ProductSet.\n  p response\nend</pre>"
  syntax:
    description: "<p>Lists ProductSets in an unspecified order.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if page_size is greater than 100, or less\nthan 1.</li>\n</ul>"
    content: "def list_product_sets(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ProductSet>\ndef list_product_sets(parent: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ProductSet>"
    aliases: []
    overloads:
    - content: "def list_product_sets(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ProductSet>"
      description: "Pass arguments to <code>list_product_sets</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ListProductSetsRequest\" title=\"Google::Cloud::Vision::V1::ListProductSetsRequest (class)\">ListProductSetsRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-ListProductSetsRequest\">::Google::Cloud::Vision::V1::ListProductSetsRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def list_product_sets(parent: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ProductSet>"
      description: "Pass arguments to <code>list_product_sets</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. The project from which ProductSets should be listed.</p>\n\n<p>Format is <code>projects/PROJECT_ID/locations/LOC_ID</code>."
      - description: "<strong>page_size</strong> (::Integer) — The maximum number of items to return. Default 10, maximum 100."
      - description: "<strong>page_token</strong> (::String) — The next_page_token returned from a previous List request, if any."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>&gt;)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>&gt;)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#list_products(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#list_products
  name: "#list_products"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#list_products"
  summary: "<p>Lists products in an unspecified order.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::ListProductsRequest.new\n\n# Call the list_products method.\nresult = client.list_products request\n\n# The returned object is of type Gapic::PagedEnumerable. You can\n# iterate over all elements by calling #each, and the enumerable\n# will lazily make API calls to fetch subsequent pages. Other\n# methods are also available for managing paging directly.\nresult.each do |response|\n  # Each element is of type ::Google::Cloud::Vision::V1::Product.\n  p response\nend</pre>"
  syntax:
    description: "<p>Lists products in an unspecified order.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.</li>\n</ul>"
    content: "def list_products(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>\ndef list_products(parent: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>"
    aliases: []
    overloads:
    - content: "def list_products(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>"
      description: "Pass arguments to <code>list_products</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ListProductsRequest\" title=\"Google::Cloud::Vision::V1::ListProductsRequest (class)\">ListProductsRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-ListProductsRequest\">::Google::Cloud::Vision::V1::ListProductsRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def list_products(parent: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>"
      description: "Pass arguments to <code>list_products</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. The project OR ProductSet from which Products should be listed.</p>\n\n<p>Format:\n<code>projects/PROJECT_ID/locations/LOC_ID</code>"
      - description: "<strong>page_size</strong> (::Integer) — The maximum number of items to return. Default 10, maximum 100."
      - description: "<strong>page_token</strong> (::String) — The next_page_token returned from a previous List request, if any."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>&gt;)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>&gt;)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#list_products_in_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#list_products_in_product_set
  name: "#list_products_in_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#list_products_in_product_set"
  summary: "<p>Lists the Products in a ProductSet, in an unspecified order. If the\nProductSet does not exist, the products field of the response will be\nempty.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::ListProductsInProductSetRequest.new\n\n# Call the list_products_in_product_set method.\nresult = client.list_products_in_product_set request\n\n# The returned object is of type Gapic::PagedEnumerable. You can\n# iterate over all elements by calling #each, and the enumerable\n# will lazily make API calls to fetch subsequent pages. Other\n# methods are also available for managing paging directly.\nresult.each do |response|\n  # Each element is of type ::Google::Cloud::Vision::V1::Product.\n  p response\nend</pre>"
  syntax:
    description: "<p>Lists the Products in a ProductSet, in an unspecified order. If the\nProductSet does not exist, the products field of the response will be\nempty.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.</li>\n</ul>"
    content: "def list_products_in_product_set(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>\ndef list_products_in_product_set(name: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>"
    aliases: []
    overloads:
    - content: "def list_products_in_product_set(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>"
      description: "Pass arguments to <code>list_products_in_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ListProductsInProductSetRequest\" title=\"Google::Cloud::Vision::V1::ListProductsInProductSetRequest (class)\">ListProductsInProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-ListProductsInProductSetRequest\">::Google::Cloud::Vision::V1::ListProductsInProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def list_products_in_product_set(name: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::Product>"
      description: "Pass arguments to <code>list_products_in_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. The ProductSet resource for which to retrieve Products.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID</code>"
      - description: "<strong>page_size</strong> (::Integer) — The maximum number of items to return. Default 10, maximum 100."
      - description: "<strong>page_token</strong> (::String) — The next_page_token returned from a previous List request, if any."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>&gt;)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>&gt;)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#list_reference_images(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#list_reference_images
  name: "#list_reference_images"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#list_reference_images"
  summary: "<p>Lists reference images.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the parent product does not exist.</li>\n<li>Returns INVALID_ARGUMENT if the page_size is greater than 100, or less\nthan 1.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::ListReferenceImagesRequest.new\n\n# Call the list_reference_images method.\nresult = client.list_reference_images request\n\n# The returned object is of type Gapic::PagedEnumerable. You can\n# iterate over all elements by calling #each, and the enumerable\n# will lazily make API calls to fetch subsequent pages. Other\n# methods are also available for managing paging directly.\nresult.each do |response|\n  # Each element is of type ::Google::Cloud::Vision::V1::ReferenceImage.\n  p response\nend</pre>"
  syntax:
    description: "<p>Lists reference images.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the parent product does not exist.</li>\n<li>Returns INVALID_ARGUMENT if the page_size is greater than 100, or less\nthan 1.</li>\n</ul>"
    content: "def list_reference_images(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ReferenceImage>\ndef list_reference_images(parent: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ReferenceImage>"
    aliases: []
    overloads:
    - content: "def list_reference_images(request, options = nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ReferenceImage>"
      description: "Pass arguments to <code>list_reference_images</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ListReferenceImagesRequest\" title=\"Google::Cloud::Vision::V1::ListReferenceImagesRequest (class)\">ListReferenceImagesRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-ListReferenceImagesRequest\">::Google::Cloud::Vision::V1::ListReferenceImagesRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def list_reference_images(parent: nil, page_size: nil, page_token: nil) -> ::Gapic::PagedEnumerable<::Google::Cloud::Vision::V1::ReferenceImage>"
      description: "Pass arguments to <code>list_reference_images</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>parent</strong> (::String) — Required. Resource name of the product containing the reference images.</p>\n\n<p>Format is\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID</code>."
      - description: "<strong>page_size</strong> (::Integer) — The maximum number of items to return. Default 10, maximum 100."
      - description: "<strong>page_token</strong> (::String) — A token identifying a page of results to be returned. This is the value\nof <code>nextPageToken</code> returned in a previous reference image list request.</p>\n\n<p>Defaults to the first page if not specified."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>&gt;)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::PagedEnumerable&lt;<a href=\"./Google-Cloud-Vision-V1-ReferenceImage\">::Google::Cloud::Vision::V1::ReferenceImage</a>&gt;)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#operations_client(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#operations_client
  name: "#operations_client"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#operations_client"
  summary: "Get the associated client for long-running operations."
  type: method
  example: []
  syntax:
    description: "Get the associated client for long-running operations."
    content: "def operations_client() -> ::Google::Cloud::Vision::V1::ProductSearch::Operations"
    aliases: []
    arguments: []
    yields: []
    yieldparams: []
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSearch-Operations\">::Google::Cloud::Vision::V1::ProductSearch::Operations</a>)"
    raises: []
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#purge_products(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#purge_products
  name: "#purge_products"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#purge_products"
  summary: "Asynchronous API to delete all Products in a ProductSet or all Products\nthat are in no ProductSet.</p>\n\n<p>If a Product is a member of the specified ProductSet in addition to other\nProductSets, the Product will still be deleted.</p>\n\n<p>It is recommended to not delete the specified ProductSet until after this\noperation has completed. It is also recommended to not add any of the\nProducts involved in the batch delete to a new ProductSet while this\noperation is running because those Products may still end up deleted.</p>\n\n<p>It&#39;s not possible to undo the PurgeProducts operation. Therefore, it is\nrecommended to keep the csv files used in ImportProductSets (if that was\nhow you originally built the Product Set) before starting PurgeProducts, in\ncase you need to re-import the data after deletion.</p>\n\n<p>If the plan is to purge all of the Products from a ProductSet and then\nre-use the empty ProductSet to re-import new Products into the empty\nProductSet, you must wait until the PurgeProducts operation has finished\nfor that ProductSet.</p>\n\n<p>The <span class='object_link'><a href=\"Google-Longrunning-Operation\" title=\"Google::Longrunning::Operation (class)\">google.longrunning.Operation</a></span> API can be used to keep track of the\nprogress and results of the request.\n<code>Operation.metadata</code> contains <code>BatchOperationMetadata</code>. (progress)"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::PurgeProductsRequest.new\n\n# Call the purge_products method.\nresult = client.purge_products request\n\n# The returned object is of type Gapic::Operation. You can use this\n# object to check the status of an operation, cancel it, or wait\n# for results. Here is how to block until completion:\nresult.wait_until_done! timeout: 60\nif result.response?\n  p result.response\nelse\n  puts \"Error!\"\nend</pre>"
  syntax:
    description: "Asynchronous API to delete all Products in a ProductSet or all Products\nthat are in no ProductSet.</p>\n\n<p>If a Product is a member of the specified ProductSet in addition to other\nProductSets, the Product will still be deleted.</p>\n\n<p>It is recommended to not delete the specified ProductSet until after this\noperation has completed. It is also recommended to not add any of the\nProducts involved in the batch delete to a new ProductSet while this\noperation is running because those Products may still end up deleted.</p>\n\n<p>It&#39;s not possible to undo the PurgeProducts operation. Therefore, it is\nrecommended to keep the csv files used in ImportProductSets (if that was\nhow you originally built the Product Set) before starting PurgeProducts, in\ncase you need to re-import the data after deletion.</p>\n\n<p>If the plan is to purge all of the Products from a ProductSet and then\nre-use the empty ProductSet to re-import new Products into the empty\nProductSet, you must wait until the PurgeProducts operation has finished\nfor that ProductSet.</p>\n\n<p>The <span class='object_link'><a href=\"Google-Longrunning-Operation\" title=\"Google::Longrunning::Operation (class)\">google.longrunning.Operation</a></span> API can be used to keep track of the\nprogress and results of the request.\n<code>Operation.metadata</code> contains <code>BatchOperationMetadata</code>. (progress)"
    content: "def purge_products(request, options = nil) -> ::Gapic::Operation\ndef purge_products(product_set_purge_config: nil, delete_orphan_products: nil, parent: nil, force: nil) -> ::Gapic::Operation"
    aliases: []
    overloads:
    - content: "def purge_products(request, options = nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>purge_products</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-PurgeProductsRequest\" title=\"Google::Cloud::Vision::V1::PurgeProductsRequest (class)\">Google::Cloud::Vision::V1::PurgeProductsRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-PurgeProductsRequest\">::Google::Cloud::Vision::V1::PurgeProductsRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def purge_products(product_set_purge_config: nil, delete_orphan_products: nil, parent: nil, force: nil) -> ::Gapic::Operation"
      description: "Pass arguments to <code>purge_products</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>product_set_purge_config</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSetPurgeConfig\">::Google::Cloud::Vision::V1::ProductSetPurgeConfig</a>, ::Hash) — Specify which ProductSet contains the Products to be deleted."
      - description: "<strong>delete_orphan_products</strong> (::Boolean) — If delete_orphan_products is true, all Products that are not in any\nProductSet will be deleted."
      - description: "<strong>parent</strong> (::String) — Required. The project and location in which the Products should be deleted.</p>\n\n<p>Format is <code>projects/PROJECT_ID/locations/LOC_ID</code>."
      - description: "<strong>force</strong> (::Boolean) — The default value is false. Override this value to true to actually perform\nthe purge."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (::Gapic::Operation)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(::Gapic::Operation)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#remove_product_from_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#remove_product_from_product_set
  name: "#remove_product_from_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#remove_product_from_product_set"
  summary: "Removes a Product from the specified ProductSet."
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::RemoveProductFromProductSetRequest.new\n\n# Call the remove_product_from_product_set method.\nresult = client.remove_product_from_product_set request\n\n# The returned object is of type Google::Protobuf::Empty.\np result</pre>"
  syntax:
    description: "Removes a Product from the specified ProductSet."
    content: "def remove_product_from_product_set(request, options = nil) -> ::Google::Protobuf::Empty\ndef remove_product_from_product_set(name: nil, product: nil) -> ::Google::Protobuf::Empty"
    aliases: []
    overloads:
    - content: "def remove_product_from_product_set(request, options = nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>remove_product_from_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-RemoveProductFromProductSetRequest\" title=\"Google::Cloud::Vision::V1::RemoveProductFromProductSetRequest (class)\">RemoveProductFromProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-RemoveProductFromProductSetRequest\">::Google::Cloud::Vision::V1::RemoveProductFromProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def remove_product_from_product_set(name: nil, product: nil) -> ::Google::Protobuf::Empty"
      description: "Pass arguments to <code>remove_product_from_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>name</strong> (::String) — Required. The resource name for the ProductSet to modify.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID</code>"
      - description: "<strong>product</strong> (::String) — Required. The resource name for the Product to be removed from this ProductSet.</p>\n\n<p>Format is:\n<code>projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID</code>"
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Protobuf-Empty\">::Google::Protobuf::Empty</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#update_product(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#update_product
  name: "#update_product"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#update_product"
  summary: "<p>Makes changes to a Product resource.\nOnly the <code>display_name</code>, <code>description</code>, and <code>labels</code> fields can be updated\nright now.</p>\n\n<p>If labels are updated, the change will not be reflected in queries until\nthe next index time.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the Product does not exist.</li>\n<li>Returns INVALID_ARGUMENT if display_name is present in update_mask but is\nmissing from the request or longer than 4096 characters.</li>\n<li>Returns INVALID_ARGUMENT if description is present in update_mask but is\nlonger than 4096 characters.</li>\n<li>Returns INVALID_ARGUMENT if product_category is present in update_mask.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::UpdateProductRequest.new\n\n# Call the update_product method.\nresult = client.update_product request\n\n# The returned object is of type Google::Cloud::Vision::V1::Product.\np result</pre>"
  syntax:
    description: "<p>Makes changes to a Product resource.\nOnly the <code>display_name</code>, <code>description</code>, and <code>labels</code> fields can be updated\nright now.</p>\n\n<p>If labels are updated, the change will not be reflected in queries until\nthe next index time.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the Product does not exist.</li>\n<li>Returns INVALID_ARGUMENT if display_name is present in update_mask but is\nmissing from the request or longer than 4096 characters.</li>\n<li>Returns INVALID_ARGUMENT if description is present in update_mask but is\nlonger than 4096 characters.</li>\n<li>Returns INVALID_ARGUMENT if product_category is present in update_mask.</li>\n</ul>"
    content: "def update_product(request, options = nil) -> ::Google::Cloud::Vision::V1::Product\ndef update_product(product: nil, update_mask: nil) -> ::Google::Cloud::Vision::V1::Product"
    aliases: []
    overloads:
    - content: "def update_product(request, options = nil) -> ::Google::Cloud::Vision::V1::Product"
      description: "Pass arguments to <code>update_product</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-UpdateProductRequest\" title=\"Google::Cloud::Vision::V1::UpdateProductRequest (class)\">UpdateProductRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-UpdateProductRequest\">::Google::Cloud::Vision::V1::UpdateProductRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def update_product(product: nil, update_mask: nil) -> ::Google::Cloud::Vision::V1::Product"
      description: "Pass arguments to <code>update_product</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>product</strong> (<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>, ::Hash) — Required. The Product resource which replaces the one on the server.\nproduct.name is immutable."
      - description: "<strong>update_mask</strong> (<a href=\"./Google-Protobuf-FieldMask\">::Google::Protobuf::FieldMask</a>, ::Hash) — The <span class='object_link'><a href=\"Google-Protobuf-FieldMask\" title=\"Google::Protobuf::FieldMask (class)\">FieldMask</a></span> that specifies which fields\nto update.\nIf update_mask isn&#39;t specified, all mutable fields are to be updated.\nValid mask paths include <code>product_labels</code>, <code>display_name</code>, and\n<code>description</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-Product\">::Google::Cloud::Vision::V1::Product</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
- uid: Google::Cloud::Vision::V1::ProductSearch::Client#update_product_set(instance)
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client#update_product_set
  name: "#update_product_set"
  langs:
    - ruby
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: "#update_product_set"
  summary: "<p>Makes changes to a ProductSet resource.\nOnly display_name can be updated currently.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the ProductSet does not exist.</li>\n<li>Returns INVALID_ARGUMENT if display_name is present in update_mask but\nmissing from the request or longer than 4096 characters.</li>\n</ul>"
  type: method
  example:     
    - "Basic example\n<pre class=\"prettyprint lang-rb\">require \"google/cloud/vision/v1\"\n\n# Create a client object. The client can be reused for multiple calls.\nclient = Google::Cloud::Vision::V1::ProductSearch::Client.new\n\n# Create a request. To set request fields, pass in keyword arguments.\nrequest = Google::Cloud::Vision::V1::UpdateProductSetRequest.new\n\n# Call the update_product_set method.\nresult = client.update_product_set request\n\n# The returned object is of type Google::Cloud::Vision::V1::ProductSet.\np result</pre>"
  syntax:
    description: "<p>Makes changes to a ProductSet resource.\nOnly display_name can be updated currently.</p>\n\n<p>Possible errors:</p>\n\n<ul>\n<li>Returns NOT_FOUND if the ProductSet does not exist.</li>\n<li>Returns INVALID_ARGUMENT if display_name is present in update_mask but\nmissing from the request or longer than 4096 characters.</li>\n</ul>"
    content: "def update_product_set(request, options = nil) -> ::Google::Cloud::Vision::V1::ProductSet\ndef update_product_set(product_set: nil, update_mask: nil) -> ::Google::Cloud::Vision::V1::ProductSet"
    aliases: []
    overloads:
    - content: "def update_product_set(request, options = nil) -> ::Google::Cloud::Vision::V1::ProductSet"
      description: "Pass arguments to <code>update_product_set</code> via a request object, either of type\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-UpdateProductSetRequest\" title=\"Google::Cloud::Vision::V1::UpdateProductSetRequest (class)\">UpdateProductSetRequest</a></span> or an equivalent Hash."
      example: []
      arguments:
      - description: "<strong>request</strong> (<a href=\"./Google-Cloud-Vision-V1-UpdateProductSetRequest\">::Google::Cloud::Vision::V1::UpdateProductSetRequest</a>, ::Hash) — A request object representing the call parameters. Required. To specify no\nparameters, or to keep all the default parameter values, pass an empty Hash."
      - description: "<strong>options</strong> (::Gapic::CallOptions, ::Hash) — Overrides the default settings for this call, e.g, timeout, retries, etc. Optional."
    - content: "def update_product_set(product_set: nil, update_mask: nil) -> ::Google::Cloud::Vision::V1::ProductSet"
      description: "Pass arguments to <code>update_product_set</code> via keyword arguments. Note that at\nleast one keyword argument is required. To specify no parameters, or to keep all\nthe default parameter values, pass an empty Hash as a request object (see above)."
      example: []
      arguments:
      - description: "<strong>product_set</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>, ::Hash) — Required. The ProductSet resource which replaces the one on the server."
      - description: "<strong>update_mask</strong> (<a href=\"./Google-Protobuf-FieldMask\">::Google::Protobuf::FieldMask</a>, ::Hash) — The <span class='object_link'><a href=\"Google-Protobuf-FieldMask\" title=\"Google::Protobuf::FieldMask (class)\">FieldMask</a></span> that specifies which fields to\nupdate.\nIf update_mask isn&#39;t specified, all mutable fields are to be updated.\nValid mask path is <code>display_name</code>."
    yields:
    - description: "(response, operation) — Access the result along with the RPC operation"
    yieldparams:
    - description: "<strong>response</strong> (<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>)"
    - description: "<strong>operation</strong> (::GRPC::ActiveCall::Operation)"
    returnValues:
    - description: "(<a href=\"./Google-Cloud-Vision-V1-ProductSet\">::Google::Cloud::Vision::V1::ProductSet</a>)"
    raises:
    - description: "(::Google::Cloud::Error) — if the RPC is aborted."
references:
- uid: Google::Cloud::Vision::V1::ProductSearch::Client::Configuration
  fullName: Google::Cloud::Vision::V1::ProductSearch::Client::Configuration
  name: Configuration
  module: google-cloud-vision-v1
  friendlyApiName: "Cloud Vision V1 API"
  id: Configuration
  summary: "Configuration class for the ProductSearch API.</p>\n\n<p>This class represents the configuration for ProductSearch,\nproviding control over timeouts, retry behavior, logging, transport\nparameters, and other low-level controls. Certain parameters can also be\napplied individually to specific RPCs. See\n<span class='object_link'><a href=\"Google-Cloud-Vision-V1-ProductSearch-Client-Configuration-Rpcs\" title=\"Google::Cloud::Vision::V1::ProductSearch::Client::Configuration::Rpcs (class)\">Configuration::Rpcs</a></span>\nfor a list of RPCs that can be configured independently.</p>\n\n<p>Configuration can be applied globally to all clients, or to a single client\non construction."
  parent: Google::Cloud::Vision::V1::ProductSearch::Client