### YamlMime:UniversalReference
items:
- uid: Google::Protobuf::Duration
  children: 
  - Google::Protobuf::Duration#nanos(instance)
  - Google::Protobuf::Duration#nanos=(instance)
  - Google::Protobuf::Duration#seconds(instance)
  - Google::Protobuf::Duration#seconds=(instance)
  fullName: Google::Protobuf::Duration
  langs:
  - ruby
  module: google-cloud-vision-v1
  id: Duration
  summary: "A Duration represents a signed, fixed-length span of time represented\nas a count of seconds and fractions of seconds at nanosecond\nresolution. It is independent of any calendar and concepts like &quot;day&quot;\nor &quot;month&quot;. It is related to Timestamp in that the difference between\ntwo Timestamp values is a Duration and it can be added or subtracted\nfrom a Timestamp. Range is approximately +-10,000 years.</p>\n<h2>Examples</h2>\n\n<p>Example 1: Compute Duration from two Timestamps in pseudo code.</p>\n\n<pre><code>Timestamp start = ...;\nTimestamp end = ...;\nDuration duration = ...;\n\nduration.seconds = end.seconds - start.seconds;\nduration.nanos = end.nanos - start.nanos;\n\nif (duration.seconds &lt; 0 &amp;&amp; duration.nanos &gt; 0) {\n  duration.seconds += 1;\n  duration.nanos -= 1000000000;\n} else if (duration.seconds &gt; 0 &amp;&amp; duration.nanos &lt; 0) {\n  duration.seconds -= 1;\n  duration.nanos += 1000000000;\n}\n</code></pre>\n\n<p>Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.</p>\n\n<pre><code>Timestamp start = ...;\nDuration duration = ...;\nTimestamp end = ...;\n\nend.seconds = start.seconds + duration.seconds;\nend.nanos = start.nanos + duration.nanos;\n\nif (end.nanos &lt; 0) {\n  end.seconds -= 1;\n  end.nanos += 1000000000;\n} else if (end.nanos &gt;= 1000000000) {\n  end.seconds += 1;\n  end.nanos -= 1000000000;\n}\n</code></pre>\n\n<p>Example 3: Compute Duration from datetime.timedelta in Python.</p>\n\n<pre><code>td = datetime.timedelta(days=3, minutes=10)\nduration = Duration()\nduration.FromTimedelta(td)\n</code></pre>\n<h2>JSON Mapping</h2>\n\n<p>In JSON format, the Duration type is encoded as a string rather than an\nobject, where the string ends in the suffix &quot;s&quot; (indicating seconds) and\nis preceded by the number of seconds, with nanoseconds expressed as\nfractional seconds. For example, 3 seconds with 0 nanoseconds should be\nencoded in JSON format as &quot;3s&quot;, while 3 seconds and 1 nanosecond should\nbe expressed in JSON format as &quot;3.000000001s&quot;, and 3 seconds and 1\nmicrosecond should be expressed in JSON format as &quot;3.000001s&quot;."
  type: "class"
  name: Google::Protobuf::Duration
  example: []
  inherits:
  - "Object"
  extendedBy:
  - "Google::Protobuf::MessageExts::ClassMethods"
  includes:
  - "Google::Protobuf::MessageExts"
- uid: Google::Protobuf::Duration#nanos(instance)
  fullName: Google::Protobuf::Duration#nanos
  name: "#nanos"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#nanos"
  summary: ""
  type: method
  example: []
  syntax:
    description: ""
    content: "def nanos() -> ::Integer"
    aliases: []
    arguments: []
    yields: []
    yieldparams: []
    returnValues:
    - description: "(::Integer) — Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n<code>seconds</code> field and a positive or negative <code>nanos</code> field. For durations\nof one second or more, a non-zero value for the <code>nanos</code> field must be\nof the same sign as the <code>seconds</code> field. Must be from -999,999,999\nto +999,999,999 inclusive."
    raises: []
- uid: Google::Protobuf::Duration#nanos=(instance)
  fullName: Google::Protobuf::Duration#nanos=
  name: "#nanos="
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#nanos="
  summary: ""
  type: method
  example: []
  syntax:
    description: ""
    content: "def nanos=(value) -> ::Integer"
    aliases: []
    arguments:
    - description: "<strong>value</strong> (::Integer) — Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n<code>seconds</code> field and a positive or negative <code>nanos</code> field. For durations\nof one second or more, a non-zero value for the <code>nanos</code> field must be\nof the same sign as the <code>seconds</code> field. Must be from -999,999,999\nto +999,999,999 inclusive."
    yields: []
    yieldparams: []
    returnValues:
    - description: "(::Integer) — Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n<code>seconds</code> field and a positive or negative <code>nanos</code> field. For durations\nof one second or more, a non-zero value for the <code>nanos</code> field must be\nof the same sign as the <code>seconds</code> field. Must be from -999,999,999\nto +999,999,999 inclusive."
    raises: []
- uid: Google::Protobuf::Duration#seconds(instance)
  fullName: Google::Protobuf::Duration#seconds
  name: "#seconds"
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#seconds"
  summary: ""
  type: method
  example: []
  syntax:
    description: ""
    content: "def seconds() -> ::Integer"
    aliases: []
    arguments: []
    yields: []
    yieldparams: []
    returnValues:
    - description: "(::Integer) — Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive. Note: these bounds are computed from:\n60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
    raises: []
- uid: Google::Protobuf::Duration#seconds=(instance)
  fullName: Google::Protobuf::Duration#seconds=
  name: "#seconds="
  langs:
    - ruby
  module: google-cloud-vision-v1
  id: "#seconds="
  summary: ""
  type: method
  example: []
  syntax:
    description: ""
    content: "def seconds=(value) -> ::Integer"
    aliases: []
    arguments:
    - description: "<strong>value</strong> (::Integer) — Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive. Note: these bounds are computed from:\n60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
    yields: []
    yieldparams: []
    returnValues:
    - description: "(::Integer) — Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive. Note: these bounds are computed from:\n60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
    raises: []
references: []